json = require "json"

console.clear()
gui.clearGraphics()

NOM_SAVESTATE = "C:/Users/10131571/Documents/maria/Super Mario World (Europe) (Rev 1).Snes9x.QuickSave0.State"
BUTTONS = {
    --"A", -- saute en tournant
    "B", -- saute
    --"X", -- ?
    --"Y", -- ?
    --"Up", -- regarde en l'air ?
    --"Down",
    --"Left",
    --"Right",
}

-- Functions (uncomment target program)
PROGRAM = "IA"
--PROGRAM = "DEBUG SPRITES"
--PROGRAM = "DEBUG TILES"
--PROGRAM = "DEBUG SCORE"

-- Debug & Test
RESTORE = nil
--RESTORE = json.decode('{"neuronsByLevel":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],[10.889499623373,14.430051666387,11.471179998198,11.765281270918,11.1936636567],[1.7565188761002]],"weightsByLevel":[[[0.27490520413797,0.50343628469613,0.80422095205392,0.16154962466484,0.13929598880282],[0.40495732352302,0.52319033680353,0.44056005156892,9.5542336119508e-06,0.83590270962988],[0.43532918437531,0.52586211215378,0.23132799347684,0.47963627417912,0.34897560963972],[0.078717193478276,0.41476386557108,0.10490451441241,0.44689495429385,0.17876241227454],[0.15989859929908,0.223474965078,0.26622628930567,0,0.26773908231826],[0.95204322129021,0.16699380574019,0.10852629984468,0.39053877372015,0.11579891987425],[0.05767551228271,0.77101143231003,0.025234500591296,0.60439004732649,0.10974090359549],[0.30304139855433,0.10462553008638,0.12892569756744,0.55612088443485,0.75142917981381],[0.19240911283413,0.18332045246645,0.0078724511721571,0.081278651599011,0.31438046188744],[0.37161974725674,0.42639255218433,0.12134595335249,0.097013257010285,0.39223057941239],[0,0.56943027357343,0.73045588504859,0.39710587427315,0.064403382537003],[0.22271440554094,0.14954346294171,0.066891562142601,0.46930837783208,0.35282812256392],[0.64094412027672,0.035975442365581,0.10473061874677,0.045251401089053,0.029143627127213],[0.077696410735173,0.091332916520496,0.12308322559058,0.68098301691347,0.20307006780733],[0.012179020090509,0.15816267437443,0.38462958572935,0.68944715507458,0.30660527651131],[0.60256786752832,0.43158447581997,0.24342793052904,0.74104289590065,0.24726345592181],[0.3016539077405,0.31833409859455,0.34983953428987,0.49247432936619,0.44861106914785],[0.24685203764552,0.77949063727433,0.067061147962759,0.0010572873570082,0.36634830905346],[0,0.21579340620751,0.43534975494578,0.35125322920633,0.48899072802626],[0.36962711711346,0.3275167558478,0.69607272249311,0.2261488684443,0.13752766364841],[0.20856733835585,0.24157763476245,0.3376163889733,0.20041211346627,0.96579197834465],[0.28518795779683,0.10040725390877,0.20252899407288,0.27828389527852,0.10477169824551],[0.5617970455974,0.72622268074755,1,0.25493776894263,0.18467094899851],[0.17966728416981,0.18013734246264,0.085457803735849,0.13158313288463,0.73824834891407],[0.37517512897278,0.038886219168454,0.21224684822598,0.15906788114076,0.16363891962872],[0.56678353464437,0.30560269444329,0.24978470390357,0.12475624116859,0.045649196304757],[0.43702122097684,0.45627264431731,0.12162653192144,0.13062857051385,0.76752589126643],[0.46782522973948,0.13810472970801,0.36841042856868,0.72396673785181,0.57297912258512],[0.2841661187979,0.17155559758495,0.21451248089997,0.25440127968344,0.54146829098291],[0.31109042715794,0.027481249553521,0.0060617053840343,0.25120828780277,0],[0.24351599377587,0.11885564487737,0.1624150948248,0.11420003235312,0.62388946715735],[0.11653706476468,0.059805431968925,0.68544818794488,0.035072771718936,0.26967231552671],[0.088269687254883,0.40901424815258,0.28542998129782,0.52416945314388,0.35793959649481],[0.034414257928325,0.23713256244726,0.54869031702763,0.016018588102578,0.17608877400318],[0.17264238056627,0.35236147081108,0.23025697606917,0.067636745166282,0.15028405410707],[0.049300425486581,0.11763927763292,0.338124856422,0.45575665239988,0.42003876522943],[0.56320055228201,0.54224889880772,0.34290686364899,0.15759867850875,0.10228059400433],[0.37128488156756,0.54265393122338,0.14216693733459,0.27533275324268,0.86917981274436],[0.28297841524183,0.69328461200682,0.16809544460665,0.095855395302423,0.51086054375066],[0.059598243524515,0.1543160702915,0.12395715404984,0.02497007993404,0.56649183246999],[0.08965060007321,0.18778853278624,0.39760843684701,0.63304489436338,0.30973421327221],[0.011175431191499,0.50731387719251,0.29886705081965,0.56077611861104,0.35268154506904],[0.11435455958011,0.12154799409345,0.2371471179767,0.16748212076258,0.14086750818709],[0.62541441986714,0.37221569869979,0.063745040692967,0.10958928220314,0.096673883957369],[0.010313333650363,0,0.13424587920864,0.28495412895441,0.071911925953694],[0.29528972678656,0.79863383044648,0.17980490311682,0.2937796566591,0.25467897453984],[0.17990046313797,0.30341241101147,0.24404415917537,0,0.44129718285064],[0.27705489843672,0.90843869625573,0.55817359613969,0,0.36996810777189],[0.48841784247416,0.89330841890728,0.43524522827748,0.45511959605551,0.26573900205308],[0.31485939300438,0.013229726583062,0.45698434094309,0.095594607952224,0.34513656115173],[0.048633792416524,0.47067550435284,0.06765012217381,0.4304141001097,0.11858132979108],[0.31142453161753,0.26982419112778,0.56949248204877,0.13887523844212,0.035002217317952],[0.23534079502435,0.41580152047161,0.10848856889486,0.13612049237631,0.92280310835547],[0.72926036755633,0.2129530810288,0.13016101031695,0.3021491539004,0.073103544051959],[0.019296093988807,0.52058777072373,0.36456956769724,0.59248891112217,0.26286896809092],[0.059765662174465,0.70689387936441,0.45857783889744,0.21285670358058,0.90417563932442],[0.23777774859405,0.11487962861912,0.28845325097703,0.064317495372652,0.3253643979323],[0.20287380398225,0.24545579510536,0.57378962442948,0.35519127860033,0.31104752194855],[0.18787118627987,0.15897057243763,0.37119264896203,0.51390781699343,0.0016771878370588],[0.4999127180858,0.49512263925585,0.11553382755015,0.29167036166852,0.4527623533694],[0.14149968896664,0.3852764053922,0.64568383818578,0.080136234836643,0.135854550963],[0.16644341176462,0.405735841671,0,0.36484008542755,0.45629673104915],[0.26232806051926,0.12852682577241,0.33587597827287,0.10826934173083,0.14952425766755],[0.80111919597223,0.10018406248473,0.14157734476345,0.15813517683401,0.84578718527001],[0.32527115697786,0.53642414562388,0.43223894627869,0.42246893424016,0.57165175211159],[0.20048804776912,0.7409419477095,0.20359159715987,0.041641607644954,0.26796043510353],[0.69367933734406,0.60881948006864,0.0052413579761767,0,0.29118633602503],[0.73695706172424,0,0.28046622433635,0.38168444732224,0.050646918267852],[0.81160967763635,0.53239255672549,0.10303488379911,0.12533167210743,0.42863013053305],[0.034819124178952,0.29423264838944,0.15011724315141,0.11656428671172,0.036211298639367],[0.38280106537673,0.69908023558868,0.0086947326015419,0.92619060193341,0.37100656259964],[0.0033350216885118,0.47668216333315,0.088157794889928,0.23560852976554,0.054746484366542],[0.47076717796037,0.16207134715821,0.19721877625799,0.10073873844559,0.70007570646199],[0.17570281679308,0,0.30292475838966,0.0049921991466254,0.44290791479049],[0.22526011857807,0.39712250957961,0.30851323954353,0.14816974201044,0.2629684098637],[0.19686894311978,0.6673571069951,0.002742874543415,0.17153697833511,0.56145135214082],[0.42366124062462,0.10934087037139,0.035640225117924,0.24362636693649,0.024225850703228],[0.25677314024769,0.010425452614419,0.64834508854276,0.36467178548845,0.013708069135504],[0.36131239198445,0.10985246011704,0.098117485610501,0.26413409520047,0.065512733730089],[0.43841444158001,0.19221333559373,0.52703237784488,0.54972421773593,0.12454445028217],[0.31972780299719,0.12264595592132,0.12223190253453,0.098139646177075,0.84517623845388],[0.37892844583466,0.6410237688837,0.11966848315395,0.0070642140839227,0.029249456762576],[0.34410042725183,0.38425351585596,0.085187784809919,0.016211297601174,0.82278501273487],[0.023168730210377,0.35647555478651,0.3862195013385,0.20270047019987,0.19800899502741],[0.22283530483366,0.41681486675098,0.057424477925904,0.087450981776292,0],[0.54827730557678,0.09867083615498,0.26467958805727,0.12112459881858,0.42074315459281],[0.4496260180789,0.27344751343962,0,0.18599384870248,0.27615929770504],[0.061715795320068,0.42975174233622,0.45804147751399,0.19618824808826,0.083861794264464],[0.27230596330733,0.32186106799978,0.11364406519569,0.44792889790793,0.050628501377505],[0.17749890674218,0.40375027032865,0.30658528122013,0.29814037872994,0.16198547124549],[0.38652906589021,0.55315530121362,0.010458539041228,0.8604723763881,0.57600154680103],[0.31686449819911,0.77535589025846,0.00056814089784429,0.11756389171875,0.56428189763256],[0.1328789765108,0.026828390557453,0.24632837449559,0.19088881383965,0.15160650534812],[0.66210999002901,0.21988625337426,0.56284855801127,0.64927069496455,0.79540803250898],[0.0236169048648,0.010209549580344,0.050889276775364,0.0022477966650644,0.057582215350284],[0.8899175854617,0.0093877010675103,0.24573826178616,0.11585281407347,0.60917863902686],[0.59260721303613,0.20480047385755,0.74085585786842,0.83352396967882,0.27435435584904],[0.3649083864198,0.017206740258965,0.11407304739725,0.25240801134233,0.0055993543826962],[0.39467374479443,0.12880463426283,0.34659736542523,0.57777680669933,0.50367708445367],[0.048822175436655,0.41346395207574,0.28040661388131,0.19209639126176,0.29387533773018],[0.50166858275348,0.12698612281705,0.024471683124924,0.049314844833301,0.53649145516761],[0.47529661992065,0.049922137471504,0.29196889900948,0.10644200356459,0.075149179610141],[0.25288548226871,0.16197655699377,0.85331611935121,0.001843998199197,0.32283943279944],[0.38977339437504,0.23364660767831,0.36505153281112,0.80473157675859,0.03429122793295],[0.14663558370016,0.062878236253185,0.33609834128188,0.58682020000993,0.059131544674387],[0.22039820700581,0.060499293851879,0.17121016682689,0.045069429505268,0.99086826685508],[0.19048518693139,0.22075759139197,0.16451783150554,0.05135783725293,0.43736312687651],[0.89705731097146,0.36970146905902,0.13298135843783,0.16564673356506,0.026613045819953],[0,0.58938887167152,0.19003008397204,0.66566704411571,0.22848475092448],[0.20965253099147,0.0025680529439312,0.2513644763463,0.27004606034978,0.78683831865188],[0.14356091376116,0.16387363180109,0.28258057335595,0.0184858221749,0.10147148470368],[0.10326585022053,0.62322302295518,0.1320930107519,0.4049008451188,0.42609553244124],[0.56222105271479,0.31324599519707,0.29032904918126,0.058017497618336,0.21911613514143],[0,0.1785417335636,0.097489939648453,0.60409732921333,0.18706033816674],[0.28911857396393,0.3946718115234,0,0.5930955795021,0.12791894116903],[0,0.092660718874162,0.050091941115296,0.22151498156454,0.67743140103132],[0.33110475535637,0.36658734587668,0.16133540878087,0.10134390433195,0.47917307429998],[0.40793758867693,0.37622960881472,0.52662966693275,0.50643985416547,0.29049672083332],[0.21938556323729,0.49068879265027,0.4196263737821,0.22379483296012,0.40845481861137],[0.11246096450507,0.16130835138577,0.42869797102524,0.023213329200052,0.033615252139725],[0.19324462440697,0.026848185871233,0.03488310638442,0.10166426565805,0.14012930223511],[0.028698930345476,0.44644529775713,0.097773363004368,0.39575262395313,0.65762548008392],[0.20804216492691,0.027746709655369,0.17941408680719,0.12379590443376,0.37098202494131],[0.061496946987014,0,0.27105108382102,0.16389709815592,0.25848986087756],[0.1301059140976,0.75277334964187,0.41169865325971,0.19251394948979,0.1021643802286],[0.78692448199809,0.11777045020738,0.44807402396029,0.22169180227541,0.40969374097465],[0.058339146566184,0.51011277141067,0.20428246429985,0.43581591703393,0.64366325208157],[0.43780999243453,0.16603796053083,0.48685692470165,0.24688240405521,0.19734837958877],[0.35821328807974,0.42307821224646,0.18213805923806,0.17596189378673,0.32539299525361],[0.49558163331804,0.27835626591469,0.27018560483724,0.40684841590046,0.16840359252676],[0.38382469777097,0.38912218389433,0.21843377912596,0.62069094391202,0.59669205106127],[0.60356548469972,0.21193034158044,0.99366807854461,0.6629792020295,0.2771305452932],[0.072297822569496,0.2290405367133,0.093096245059924,0,0.0084533170975505],[0.29068310528063,0.39315744988334,0.42118255073616,0.37121700053931,0.069282394788702],[0.071775980194063,0.78273527080316,0.53634895020176,0.77048079642551,0.079896407032832],[0.16625556121894,0.16912633748213,0.19677422707686,0.35785441760694,0.90543192535226],[0.27146114952532,0.012314541623352,0.056348658111779,0.37100758072123,0.062426663666644],[0.019013578464731,0.19901273390224,0.7111603631482,0,0.90600029881609],[0.071973202269475,0.27843655881706,0.061383393656758,0.080501596240137,0.6143325505365],[0.17203717993551,0.27709412323901,0.35579965288239,0.25113635366492,0.038505689561021],[0.083045914639453,0.37197102130908,0,0.40817747269008,0.53096853600823],[0.44015541324665,0.2951511745999,0.0042176989515312,0.10249827035401,0.22345946800473],[0.083167821655064,0.61504002321356,0.37352990862463,0.3421687998039,0.09707118349288],[0.60572488463758,0.8573970589999,0.030584723737986,0.071481329794065,0.37559660629459],[0.4717652897204,0.078489725938834,0.16537895293414,0.66633901557725,0.63573968895346],[0.02353984887871,0.66822674478492,0.17126565916823,0.008482347562905,0.15692332408611],[0.27605733664253,0.44303118488756,0.66038839163855,0.19865483893509,0.037830359137911],[0.23963011894903,0.1964712182983,0.24443904329835,0.26986255395878,0.047020817422571],[0.12409305459652,0.15451999982835,0.10823450421402,0.012868010436144,0.29017484723631],[0,0.69274974305158,0.27944969573348,0.65148508899247,0.62120930046967],[0,0.39143085296057,0.20205464565183,0.13085050078545,0.19739724561055],[0.092175259929957,0.23043417351538,0.69014785239413,0.17952679468999,0.19612836998107],[0.42423694342796,0.021701312779255,0.063045863351807,0.076116750723236,0.24488506568236],[0.44625242385014,0.34133701711151,0.43449082786974,0.016982375348155,0.36954864506625],[0.1460502412763,0.17360869218782,0.13401891615182,0.011977066529148,0.52295406590448],[0.22078126502099,0.51853397656489,0.39402953303335,0.11684982896044,0.24595481134263],[0.36459491218733,0.26415456039162,0.30762753356378,0.1533183100647,0.21832318050186],[0.15998007034932,0.140017450059,0.2661045180346,0.026285352999319,0.16295321765394],[0.39359607012513,0.33248299287413,0.16147006123186,0.36071674572457,0.26633132810206],[0.24786479429979,0.10706951139495,0.042625124728857,0.21107907048944,0.044977552970124],[0.4079162183204,0.51226521124083,0.27807531939117,0.44517094757485,0.19486302171398],[0.1352332782102,0.3220219756654,0.39935214609797,0.5468065411558,0.0096405633552702],[0.11568348877916,0.21470796649989,0.084175006310216,0.11636555510106,0.035158588321974],[1,0.2304071723487,0.018427919323873,0.10836625741899,0.049528255442806],[0.1344140859075,0.46155506861291,0,0.19737271695094,0.1083764882292],[0.2229661331062,0.35574848605562,0.079032926826087,0.56904530462277,0.031959906780685],[0.56466973611648,0.47951997245597,0,0.0074725084111393,0.20607776644616],[0.0010556809249167,0.11665321613188,0.19550815187305,0.076661704025546,0.74543133827987],[0.034920993893946,0.065502647391186,0.26948816915243,0.036584438700472,0],[0.041139342392626,0.15172387059095,0.2855966404093,0.32241442128496,0.31084826040948],[0.41734068272913,0.077540756398963,0.48490068038969,0.68606881211032,0.055263732721494],[0.44763961308141,0.61061996172383,0.025649745582416,0.10603803615215,0.36262295400078],[0.17824486957315,0.72016588915694,0.99969115933443,0.49683270658852,0],[0.70917505831234,0.21139960539238,0.12948603160806,0.2827639139158,0.07783866811687],[0.074755608453312,0.53143944002113,0.051579812919164,0.55053862519966,0.21895460539547],[0.47319809161507,0.37489170120949,0.20034711254529,0,0],[0.73506134967637,0.37780411730902,0.319890664375,0.11508954207185,0.25469766668902],[0.10048046318266,0.55616825589116,0.30010883482988,0.20800523088321,0.012160010727444],[0.61149260928042,0.21166925375154,0.1704627513239,0.76283134215063,0.038949586559273],[0.24933943281174,0.0096674008730529,0.64150243775779,0.019563557287343,0.70384645927996],[0.15593440927041,0.71925133248243,0.12982785713095,0.079927836247643,0.28774162918211],[0.19195071153577,0.094587158006244,0.2312413421461,0.21136779511654,0.49291326630455],[0.70543076119312,0.42698464696357,0.32400648983177,0.108743203743,0.20395505476524],[0.39173104216839,0.30367674603382,0.48471242618608,0.099603282415027,0.29451198329002],[0.41834093662669,0.35345741873486,0.26402977908259,0.84702582202194,0.30226258367045],[0.27148389240917,0.055513105551518,0.067742346440747,0.034916396137372,0.12978506267715],[0.21996544356892,0,0.41910594500677,0,0.051685389145234],[0.78288972431875,0.30126073118672,0.34007096236891,0.35135742148349,0.81302026183317],[0.090218393857205,0.16314795978495,0.41022031619639,0.019824927859901,0.12842960034938],[0.26559349433841,0.10910016149575,0.11651029021585,0,0.64630392173477],[0.41023519541901,0.3269049296355,0.049893193464237,0.39580353558514,0.22290066171491],[0.47088051044942,0.60890787889221,0.89863384504893,0.9161644694506,0.87257861830955],[0.038290140536042,0.34683306611813,0.16665236712651,0.45012267384483,0.51401436169213],[0.50346052515394,0.53713326667007,0.5631487732288,0.040786814197164,0.75721561479193],[0.30831947873079,0,0.29454685834539,0.77183642807165,0.11411687168601],[0.040408299868037,0.12326329460482,0.050909560176211,0.25702538414219,0.51985051247867],[0.30139201230618,0.80746410722944,0.43102951467252,0.24485374321473,0.22760695049105],[0.074277555663749,0.55406526970456,0.011536003858057,0.035779365246437,0.15156727157938],[0.39279293786183,0.026044096500332,0,0.24762423025413,0.19692981405287],[0.26721099637811,0.12199572592161,0.3169222384812,0.54224631093875,0.023030807966855],[0.062144848617666,0.14789226948551,0.29439872303877,0.26949043536007,0.34762289486536],[0.16491098113861,0.36360685037017,0.12017366368307,0.033871011963528,0],[0.35526194942413,0.23580480619706,0.029624119804167,0.50821629776424,0.31075949063635],[0.57046442878212,0.48562839268222,0.37170696744161,0.081186639981368,0.19187803249473],[0.38734182209674,0.00072154360266794,0.098397485939883,0.21664163394234,0.92194064607749],[0.85927525467351,0,0.1774429819407,0.35878889405338,0.10802227557205],[0.20921939183105,0.52113308916806,0.089534067764865,0.3467070233377,0.67959633893967],[0.25505440773927,0.14267904815078,0,0.10828306170669,0.58527974020485],[0.035215392049229,0.21712326265215,0.43466251795325,0.1470804366133,0.24059486290079],[0.51996139181818,0.70199202144411,0.34941905713705,0.28512825336986,0.28317327419291],[0.5409726890514,0.17471250535108,0.63747381382727,0.36868764254926,0.27352565295021],[0.0041649026132668,0.19764502539186,0.090409017683534,1,0.5483470694157],[0.59079460361447,0.34476105166969,0.41395843511887,0.082706931507391,0.023873354066485],[0.42241272877268,0.27228019574547,0.18133101442055,0.097355062492798,0.39160441039209],[0.51487574222349,0.14837440967463,0.14644474878424,0.25009934737807,0.22192091061175],[0.017872210550981,0.34445317841045,0.43429515524779,0.48812237864223,0.18513536357479],[0.32097641572053,0.24034835525494,0.32287793565485,0.71722152040594,0.17059550684926],[0.025732987141737,0.77754232404595,0.06409890802797,0.30436147029775,0.21650713413489],[0.64183631084338,0.74725229085511,0.26298020233561,0.73135765501552,0.13422561757671],[0.40542686479221,0.60202989966393,0,0.1780988595064,0.43030478709738],[0.19743754284653,0.39108169228974,0.54927579557697,0.21146285753799,0.34743684836249],[0.99412127985205,0.10944106052269,0.018141430713317,0.49966726730818,0.16803823010264],[0.054708437906654,0.11274755939929,0.1705104969113,0.22456480938827,0.10303218686509],[0.44318847952372,0.0044739386946751,0.92011917546155,0.24014626182605,0.012779033316008],[0.20081659412889,0.39512229733635,0.35223751587407,0.27021491742976,0.33844415748988],[0.70945920945441,0.10187603268481,0.51930809615879,0.29853636100723,0.81410098656475],[0.57004693035757,0.15461724622892,0.054278409637201,0.45028744107998,0],[0.54189687499066,0.083805868718804,0.12716092853651,0.042255517952404,0.15054798857873],[0.90345000505425,0.46451954680647,0.34768375021659,0.029233828038176,0.056841210439776],[0.16865239132443,0.18588414509903,0.36425101500209,0.087785730815376,0.29741799498965],[0.17589430934967,0.13193366191764,0.20744660256391,0.02823378027666,0.36503640812077],[0.12231757929615,0.29581920832499,0.20926858536445,0.40139786431849,0.67594895508428],[0.058415051115703,0.0021132353039178,0.12502865625401,0.16653533838148,0.063360597288989],[0.03568255010852,0.11016947694456,0.51699227675293,0.84679248035673,0.33283044634473],[0.35054594529183,0.2111674296638,0.63287342518175,0,0.38193307842994],[0.32672490235502,0.10325010620516,0.31219522879418,0.72325884937862,0.79450022830572],[0.51581499281525,0.15821799749656,0.54472750950974,0.019524742015395,0.051847277458546],[0.50379476790637,0.2470687939767,0.0047663437700091,0.16438204938496,0.29860707094063],[0.76363804129922,0.28374017599908,0.41047465141508,0.45636219468622,0.16245593898445],[0.11272538684216,0,0.078300884547021,0.017875282412696,0.49054079377318],[0.0092007537774709,0.12017422859002,0.67935617816191,0.214019191801,0.022217628798651],[0.70026346098615,0.36932721236349,0.15664218558317,0.25723096511964,0.50733515362656],[0.15931626147122,0.89051899043309,0.15575575885243,0.13665582378106,0.13457005030453],[0.64067694171092,0.62782097306453,0.0070058077014729,0.39036549034442,0.44771334195024],[0.45571004312707,0.32725423735269,0.26330474175049,0.54044590833087,0.44838080238658],[0.26669390399027,0.38325706354618,0.71623705400715,0.8787954746595,0.63499063759958],[0.26900446945248,0.25397048475732,0.81855785680169,0.32620701109972,0],[0.15403315754678,0.52653603444722,0.10449946906546,0.23933271921686,0.017790468621913],[0.034109204601295,0.16396645842057,0.27148143636099,0.59095190412666,0.51782045337508],[0.24735630146101,0.59667512788318,0.077062774180179,0.11652045402655,0.41575977962888],[0.56539549634736,0.22787320984823,0.19893895886791,0.0015026320433599,0.032233380436194],[0.22685484909275,0.16326065211677,0.03292243812946,0.89816077123091,0.6480788965393],[0.42086311201915,0.39976840235533,0.66850331832755,0.14315586381047,0.5167462895398],[0.46798612300658,0.29075894557677,0.51417149033038,0.19882794115546,0.17853835974491],[0.098505860162353,0.31088907654287,0.3419409138839,0.75192484681384,0.48302540970581],[0.46634864030594,0.12742362197234,0.57319302561035,0.62935557944963,0.3743982028049],[0.2662518692739,0.33748244121449,0.20172365683382,0.28484968264122,0.04324939720874],[0.4477824128451,0,0.27326227888123,0.1186651630175,0.00038351716608498],[0,0.16252937783327,0.2450833550499,0.11577864355934,0.55978187927243],[0.016298783483475,0.59079627768592,0.14285906170716,0.013217387243734,0.27615245815733],[0.30452861129259,0.27246813657368,0.47089138060289,0.030933436758066,1.9498139937291e-05],[0.19847286480631,0.48327785883919,0.27800706299026,0.27543643515286,0.28699663234371],[0.15969765462855,0.27526783319839,0.25622931264327,0.43493225120858,0.012981146555368],[0.62927238337017,0.38775364131157,0.10449640335031,0.33556889506623,0.55990063548595],[0.52607609151528,0.4520524157879,0.064154314281602,0.67449900608752,0.50224552104774],[0.4210877531131,0.078715508688133,0.071184136956622,0.35294289122214,0.14014317573977],[0.27128441047851,0.56471680428065,0.51995124273293,0.2208995541175,0.12003052157467],[0.79697551770513,0.36561815864066,0.27015550625124,0.54367438721603,0.36989670804843],[0.05093917598233,0.14710664021942,0,0.24905804424456,0.13248390433656],[0.27835708787254,0,0.23882777174975,0.45162884664835,0.73416665628718],[0.13643940088269,0.97143793961662,0.13776371122937,1.0731468807898e-05,0.56807988034272],[0.1385105427119,0,0.44323726366377,0.24265151897498,0.33366527756223],[0.019716290801744,0.20464475521325,0.15093845189572,0.67398973202296,0.36563392762275],[0.042847742726434,1.6692944194865e-05,0.15490208014717,0.097155817831687,0.054637582533861],[0.12393887631461,0.18178836638191,0.1983586366624,0.10413335143082,0.12382389580696],[0.29376176250238,0.88804892066821,0.14647992813552,0.1774055045705,0.84976975282059],[0.66451969908659,0.25355859760253,0.44947102567943,0.38283509755449,0.17242432192813],[0.64738072562566,0.17215989039855,0.86873656341462,0.5681419413705,0.41540493123287],[0.33569855774683,0.025880171661865,0.52264835397159,0.38081301395484,0.16499953695553],[0.21493175847379,0.01190524312894,0.0699348728196,0.028053227400605,0.18619889268762],[0,0.72330261880369,0.10503464123844,0.06784925842786,0.0074546590557304],[0.042981095900577,0.35516569282396,1.0764878855345e-05,0.15358644575097,0.098186192879653],[0.10110630581208,0.47513221482108,0.31437238809803,0.42419975069461,0.091721301310331],[0.098582378059571,0.84365379492161,0.08586218518616,0.23154011296924,0.0025685028713988],[0.61473892547937,0.1179379895815,0.35567213721818,0,0.21420630500797],[0.6410949408881,0.63551498946097,0.25916355996422,0,0.95548566048049],[0.48852168751037,0.10891202101026,0.38659093307729,0.45481443296362,0.23829871006076],[1.3122463125223e-05,0.25141616290806,0.10681983586126,0.37666032236066,0.24859753235356],[0.093283290534536,0.072186507361857,0.072185160445319,0.39614532453874,0.077396773155792],[0.08782293145322,0.05081626181443,0.058615973648824,0.33447804649056,0.24173676450591],[0.19820012126835,0.091527605779674,0.54283531487569,0.18382153807731,0.088312177603121],[0.37016661363813,0.37070806207903,0.43268818083878,0.34014476138014,0.40184636363438],[0.36118026001684,0.035300819326505,0.2612099626196,0.47231022990302,0.41820416795891],[0.21051488524321,0.0022721898154938,0.1926230207165,0.70618446339574,0.69413672453364],[0.12663347817939,0.082099706749367,0.54299090618376,0.49498384550805,0.45839724241569],[0.0010834996905441,0,0.17275860232805,0.026704889237748,0.033770628906403],[0.18387177146858,0.41391742271942,0.051861115883956,0.099511855559517,0.13815042734179],[0.22453815831732,0.49758663622849,0,0.012548754358394,0],[0.23511567743314,0.23722093642671,0.2488377679525,0.20483288344233,0.4434896954287],[0.43364946881629,0.69806105246235,0.97339554735602,0.33287051192946,0.5012286792888],[0.022326364233145,0,0.0155666159051,0.41907766938377,0.1154327509451],[0.16488232954176,0.57404281907129,0.077018697432433,0.23248880765761,0],[0,0.25177133921775,0.68484172481729,0.19082331492675,0.35454921543535],[0.020198082491272,0.0088019653713315,0.11588047577931,0.3297327202678,0.56048773171354],[0,0.32342932182803,0.1025112865845,0.056017402589698,0.85329876808556],[0.57408479739115,0.12894664723386,0.17700867886347,0.52430444620681,0.095596958840973],[0.7193634464431,0.041378063093878,0.22422088954682,0.50869582526193,0.65094197448377],[0.28363618551355,0.20371912143583,0.41942095252665,0.25219818689401,0.32462736927538],[0.42750162427381,0.29409303682756,0.091126101814738,0.14488319369244,0.29271376477801],[0.21352031059756,0.31993328113381,0.68405452187924,0.19458940490613,0.65267706623086],[0.090292421077578,0.36003340969561,0.30085188868484,0.19516550533959,0.63111800198918],[0.068165473677975,0.15700037197751,0.28429699743247,0.60767811648368,0.31147094005476],[0.022806578854821,0.71633313819913,0.77370264940838,0.30052647040053,0.37619004863579],[0.92641806037622,0.16955727815157,0.37377007105348,0.25037133781653,0.46293770310428],[0.28251612804769,0.4678480522566,0.18860236561843,0.3862761169708,0.19028200127774],[0.16925279486388,0.070931782665716,0.26085027846371,0.293028998214,0.42688123413232],[0.30458058634021,1,0.045249911393936,0.031191604643789,0.079669229477788],[0.31630604267399,0.22665990795535,0.35341304770594,0.36780546869738,0.010325755898193],[0.42669035651159,0.83162977791558,0.20507592494768,0.19450097516507,0.38602927708306],[0.39739109586556,0.35786942100486,0.55233994978853,0.25614311227265,0.3310115331824],[0.14587780644958,0.20802405135528,0.64686585100847,0,0.41552066410675],[0.77708550279871,0.12733884277816,0.25019869544422,0.36094536391127,0.20326831795831],[0.31624287134247,0.042484502275253,0.34067631152073,0.45779306843419,0.10265985043885],[0.81358572513605,0.037843500772345,0.21510451397348,0.38208437621847,0.34666247126675],[0.27155298223569,0.34100430180002,0.0076048321696311,0.77712682439088,0.13239175297408],[0.15880593760592,0.28006762882634,0.695885956492,0.73165318856664,0.46203598364862],[0.23433193732125,0.068957371298958,0.37300584437369,0,0],[0.11047808981863,0.046226787704597,0.54767550083675,0.61431917554952,0.26483672315138],[0.20107342594086,0.20468816129517,0.51218199406509,0.17635481800363,0.70816595042611],[0.9294509780188,0.18140639230401,0.42105642001894,0.5573440616736,0.15038545480127],[0.12513264992331,0.53736156329228,0.29319271937979,0.55956236997945,0.63455761293539],[0.29910915398463,0.45986796388323,0.014294868761751,0.84648533534698,0.03310707685439],[0.21152641822189,0.18657364003972,0.54587386267925,0.10518554887348,0.38735755631966],[0.30111221852008,0.23534013412744,0,0.70295692002432,0.056468663072817],[0.12750539713764,0.36657124374535,0.40028835515416,0.50145760923101,0.0026585414977251],[0.16864238536974,0.83768099387053,0.66714761313121,0.087741370556019,0],[0.46474490986785,0.0048537249352018,0.12268793681695,0.33222245403268,0.28688928341514],[0.47220025981206,0.10759876210643,0.67510296034517,0.092213631232434,0.58520086790832],[0.26552537451561,0.26841314695885,0.86275814562168,6.2770154207249e-06,0.25760851075696],[0.15210380448628,0.14390131656551,0.42622163223097,0.38999562626038,0.3187974095381],[0.1725813992519,0.29477348757308,0.42613828697295,0.0011784683427833,0.52871792505153],[0.16801261570081,0.03146189356025,0.4585641829184,0.32641412899321,0.54288203872084],[0.10523605934629,0.061830658811515,0.47395406145301,0.66050076816907,0.38483966741039],[0.61651515461025,0.82021790302863,0.11445072668596,0.317723700431,0.11013242184952],[0.14243995218341,0.24213238381361,0,0.068288729267743,0.21130046332244],[0.10023587782184,0.34052755702422,0.93762342686539,0.11082650452232,0.48351749437288],[0.1401901124243,0.2066267059739,0.083126270161643,0.084537629385425,0.68417637218952],[0.15760381339847,0.87160572163956,0.11983860162533,0.39388076634818,0.13862984219961],[7.7318743822437e-06,0.0071978074899936,0,0.33600050271807,0.14402981140683],[0.34886934116374,0.26521635180573,0.24542723994498,0.043645478991709,0.015506540291871],[0.5554764479218,0.25883491862941,0.39725949796051,0.62173452945145,0.3002648191045],[0.14916826037782,0.24128639392608,0.538412067098,0.50996195851989,0.036909331950743],[0.011299683748541,0.44730003119759,0.029335148776328,0.59558145147875,0.014443524960235],[0.20382925267234,0.29611865446531,0.3098976305476,0.025137030570454,0.16450520592032],[0.14166395404021,0.18395904775546,0.10778174167024,0.096872867462925,0.15825414971527],[0.035762821710264,0.53201158852741,0.16102016082899,0.24986746418308,0.13561882396609],[0,0.11383285618639,0.22483594376867,0.12436367082391,0.28236473578907],[0.3472498960322,0.43574430055296,0.11931462066596,0.037705250924989,0.076712549450541],[0.07984262559265,0.54433547323104,0.60833781058589,0.17612333662326,0.25604569378326],[0.1132388046315,0.12889335293477,0.11328019593508,0.12819054349484,0.16493440105269],[0.27124667557725,0.13557361648202,0.23175391419687,0.15953043053618,0.1882708917545],[0.31317981887489,0.55487669545896,0.13937669060165,0.29519024400078,0.29623757187797],[0.067086031927105,0.064946070134294,0.0055173397712703,0.25661570631874,0.31128439818019],[0.16416644872647,0.59438668606089,0.47611502391561,0.041453711516832,0.32583342898009],[0.13396404229941,0.20676256707723,0.19500114052902,0.037472967984232,0.33507556471852],[0.24923825194766,0.5754534407346,0.20773138293389,0.24033337773138,0.32495798162982],[0.41702840698287,0.061788435513352,0.36093639522205,0.54744484087135,0.17488928518289],[0.038657455189292,0.48852731299049,0.6689461026052,0.24879772808515,0.29616686367772],[0.34667627320731,0.47635220757118,0.33203186700022,0.20738560150532,0.081746944095203],[0.7377018494653,0.29843774837626,0.051554252317247,0.055753049495319,0.038841452097887],[0.031280539828979,0.30697836800472,0.54779783993362,0.087902499312431,0.23588620760943],[0.25884480544132,0.41647690885525,0.13617801916635,0.33277933360528,0.43120184887288],[0.35034680894217,0.12555347000382,0.4745530669395,0.5720819943617,0.13612900058392],[0.1984417517598,0.36948021472989,0.065589107880122,0.064885919390283,0.2610134346718],[0.0011345153496964,0.19942531142649,0.21898815613052,0.19309604553737,0.29620027274452],[0.42616182291222,0.98399316122273,0.083731485618813,0.13138438841705,0.61911543536766],[0.074977406583588,0.63538863012995,0.27105553412057,0.094114245542769,0.0026818992008996],[0.28519593210687,0.093865631121309,0.084083633630093,0.30038902397021,0.19685756751281],[0.21055879027694,0.078810292785067,0.030556322172287,0.13811292714243,0.17678996876969],[0.079233587572271,0.26255855013914,0.53212168482169,0.096913328244449,0.079187709280918],[0.71640770218533,0.36353051503272,0.17857466227748,0.28492216567076,0.28125667242042],[0.31849714081309,0.64243962897689,0.15121875937162,0.84799764100941,0.14928741174326],[0.015459502422419,0.12707707225405,0,0.72301329579438,0],[0.0024419658413871,0.22043663123181,0.047758693346424,0.17483329402673,0.24858777260932],[0.05475329294111,0.20988498925664,0.19107386190547,0.26083739063631,0.038447552118655],[0.21657902177353,0.020309849265311,0.0060925723385594,0.1773907162917,0],[0.37657212531288,0.42318823355587,0.51167502738859,0.047817514503961,0.39887638216629],[0.20572818110929,0.081253570091205,0.017485421950734,0.219894264854,0.55830033794247],[0.0087362894839948,0.27780560265882,0.48722476601966,0.27016707998407,0.37439425378662],[0.43216688419736,0.3424509881871,0.15119353653714,0.22910217371517,0.25715447415828],[0.14285864514613,0.019890234986055,0.16619567413656,0.23539991096288,0.57166768987812],[0.33520951822683,0.074378817347823,0.50710341017925,0.24830905959469,0.19536829899611],[0.42697854443464,0.42227487210043,0.56922715945103,0.28420775642785,5.025487045538e-05],[0.094082928521587,0.18018845886105,0.096806185169017,0.16471020713725,0.50588426663081],[0.10418283267244,0.6473078229068,0.52590434082719,0.18278699892898,0.48493206564954],[0.10357395232019,0.011820065696847,0.022062560365587,0.097549168117325,0.21783586466618],[0.51339484213825,0.42003775026748,0.72175638397768,0.43506639111869,0.18782360631469],[0.078600821302758,0.32546833319284,0.1910198467573,0.036780995275109,0.072980287423945],[0.1738430389664,0.57336757789402,0.40252882201067,0.49036112994008,0.36446430191001],[0.45857152091773,0.18377382848006,0.28809184859819,0.23556448274872,0.44103690490498],[0.72908287795875,0.9538249446042,0.27864341325347,0.2181829969567,0.34901205672536],[0.11249468718313,0.025677815831449,0.08155396299948,0.3021233513771,0.40574909209325],[0.050425398427114,0.43819221176305,0.11037418186298,0.099269797071553,0.17166072073312],[0.13319163897905,0.82710443231411,0.84308087456157,0.074662127227666,0.15777540658556],[0.046877787609043,0.41958526669028,0.22059483502236,0.056030098677554,0.024304180913444],[0.69135724360059,0.17123189124322,0.13483332261788,0.0068529144747074,0.54994740638154],[0.1368206273347,0.30958491253037,0.83797111588796,0.78043356620544,0.27932591677263],[0.17960102098199,0.30801372352046,0.26197066562538,0.3301888485392,0.12154868858549],[0.43229309651504,0.043303118288026,0.013132972071903,0.19534993181363,0.17435417792832],[0.34137418742657,0.57643753338401,0.46068107124984,0.17168126851735,0.17972789802511],[0.24608190770235,0.36189041373994,0.04405581022905,0.021401679132527,0.37877577299682],[0.97325620341275,0.29520621250302,0.16167848816236,0.54375842047422,0.065211473743399],[0.069536594672972,0.0037666949153991,0.022331743665212,0.73116372048543,0.56190191978039],[0.58622594673269,0.13869556987002,0.1506681301497,0.084131335313808,0.1664878196998],[0.01138347597253,0.067066302582938,0.012246511358289,0.16621298080572,0.38344344319999],[0.4327057192268,0.4936055988396,0.20391301093135,0.1141823755019,0.13595533210297],[0.1640523701058,0.27205762273803,0.28014613360942,0.094638046792946,0.060714729183104],[0.58444695234913,0.84088678631761,0.058259378079399,0.062193116861424,0.28670709509084],[0.14421561845889,0.071297536555781,0,0.049075541446827,0.60135949729947],[0,0.46614302639848,0.16734082204972,0.49277400751576,0.13654857999156],[0.016414290295876,0.16181612992906,0.16192793843065,0.31783841866026,0.28810951931595],[0.19476989758252,0.32322069059743,0.21085455090254,0.19257483382526,0.29500892992383],[2.731365279994e-05,0.39165033568887,0.10278947627617,0.59775718136222,0.5093093644782],[0.30488765779692,0.042649730527168,0.016895476612158,0.27296678195618,0.090082266044008],[0.25085363594751,0.18998224996162,0.39679095753674,0.61773626227963,0.25533329582055],[0.52623446695045,0.55857582863281,0.25913403505214,0.33457129601195,0.19137544931178],[0.021934613112941,0.31685469218115,0.090291351703966,0.13328722036526,0.92138537597363],[0.38992660596636,0.089173292837611,0.79676775694283,0.34107079379485,0.13514870345062],[0.064370045352357,0.14498450056152,0.0051013042795987,0.40707093693135,0.43005991919753],[0,0,0.15905083527304,0.36961200283512,0.45853701817735],[0.45545012441392,0,0.2348530570232,0.047154909127712,0.7184880533192],[0.16957173741371,0.1116696594614,0.66507808943328,0.70905089284407,0.11944109483101],[0.09599629371226,0.67319996192886,0.15522743489877,0.22554402277199,0.071938412160489],[0,7.2722550175336e-06,0.28860823011335,0.056968673235354,0.15343416980492],[0.37477914094716,0.31909972089305,0.29128141174424,0.078403691226591,0.034233484935994],[0.055081349763162,0.35512460312441,0.22375091027443,0.12487449167504,0.48044138363741],[0.19600319530139,0.50887039003129,0.27438880164408,0.08433345320472,1.1795538006707e-05],[0.12535674357303,0.11686007530491,0.09900438785572,0.41903905833184,0.025772531358001],[0.057069245506063,0.30009117308912,0.094442035653722,0.059183111734768,0.61619766242418],[0.051021071562124,0.19457937695511,0.42141295333301,0.0012391321759158,0.072553547829564],[0.75655020619806,0.28783137319295,0.23376325991193,0.52941734216235,0.47152179093255],[0.53331452644001,0.21759507197029,0.40779433743214,0.37054490652809,0.1509154970927],[0.79177373452258,0.48922932673911,0.35470651706486,0.00017048726534226,0.11667312105473],[0.43421615952517,0.19251605589618,0,0.48429653324142,0.10313389260351],[0.273301272049,0.39946100894887,0.17171917430209,0.25950967337345,0.11265108456422],[0.032303854180164,0.31640601267586,0.62458932316925,0.14012518321629,0.78540711067503],[0.17349446985389,0.52983153557757,0.11887278670487,0.22279541901991,0],[0.22202301939443,0.11525632631187,0.033688610756186,0.190136922041,0.23428359000577]],[[0],[0],[0.034324941567162],[0.12828703196575],[0.0082427017151933]]]}')
DRAW = false

-- Réseau de neurones
NB_COUCHE_CACHEES = 1
TAILLE_COUCHE_CACHEE = 5

-- Algorithmes génétiques
NB_INDIVIDU_POPULATION = 10
NB_GENERATIONS = 5000 -- stop program
TOP_CLASSEMENT = 0.5 -- keep only part of the ranking
MUTATION_PROBA = 0.25
MUTATION_RATE = 0.2 -- ±%

-- Paramètres spécifiques au jeu
SCREEN_WEIGHT = 256 -- x (horizontal / to right)
SCREEN_HEIGHT = 224 -- y (vertical /to bottom)
NB_SPRITES = 12 -- limited in this game

-- Constantes de facilitation
TAILLE_TILE = 16
--- @deprecated Depending "sprite"|"tile" input group size
INPUTS_X_MAX = SCREEN_WEIGHT / TAILLE_TILE -- x
--- @deprecated Depending "sprite"|"tile" input group size
INPUTS_Y_MAX = SCREEN_HEIGHT / TAILLE_TILE -- y
NB_INPUTS_SPRITES = INPUTS_X_MAX * INPUTS_Y_MAX
NB_INPUTS_TILES = INPUTS_X_MAX * INPUTS_Y_MAX
ENEMY_ENABLED = 1
TILE_ENABLED = 1

--- @alias Position { x: number, y: number } In custom grid (not in pixel graphic). Start at "1"
--- @alias Reseau { neuronsByLevel: number[][], weightsByLevel: number[][][] }
--- @alias Generation Reseau[]

function shuffle(tbl)
    for i = #tbl, 2, -1 do
        local j = math.random(i)
        tbl[i], tbl[j] = tbl[j], tbl[i]
    end
    return tbl
end

--[[
 1  17  ..
 2  18  ..
..  ..  ..
16  32  ..
--]]
--- Starts at "0"
--- @param position Position
function neuronIndexFromGridPosition(position)
    return position.x + position.y * INPUTS_X_MAX
end
--- @param neuronIndex number
function gridPositionFromNeuronIndex(neuronIndex)
    return {
        x = neuronIndex % INPUTS_X_MAX,
        y = math.floor(neuronIndex / INPUTS_X_MAX),
    }
end

--- @param reseau Reseau
function drawReseau(reseau)
    local inputCellSize = 6 -- max SCREEN_WEIGHT/TAILLE_TILE & SCREEN_HEIGHT/TAILLE_TILE
    -- input #1: sprites
    local spritesInputsDrawOffset = { x = 0, y = 0 }
    local spritesInputs = { table.unpack(reseau.neuronsByLevel[1], 1, NB_INPUTS_SPRITES) }
    for i, inputNeuron in ipairs(spritesInputs) do
        local position = gridPositionFromNeuronIndex(i - 1)
        gui.drawRectangle(
                spritesInputsDrawOffset.x + inputCellSize * position.x,
                spritesInputsDrawOffset.y + inputCellSize * position.y,
                inputCellSize,
                inputCellSize,
                "black",
                inputNeuron == ENEMY_ENABLED and "red" or nil)
    end
    ---- input #2: tiles
    local tilesInputsDrawOffset = { x = spritesInputsDrawOffset.x, y = 100--[[TODO computed]] }
    local tilesInputs = { table.unpack(reseau.neuronsByLevel[1], NB_INPUTS_SPRITES + 1, NB_INPUTS_SPRITES + NB_INPUTS_TILES) }
    for i, inputNeuron in ipairs(tilesInputs) do
        local position = gridPositionFromNeuronIndex(i - 1)
        gui.drawRectangle(
                tilesInputsDrawOffset.x + position.x * inputCellSize,
                tilesInputsDrawOffset.y + position.y * inputCellSize,
                inputCellSize,
                inputCellSize,
                "black",
                inputNeuron == TILE_ENABLED and "red" or nil)
    end

    -- outputs
    local outputCellSize = 12
    for o, outputNeuron in ipairs(reseau.neuronsByLevel[#reseau.neuronsByLevel]) do
        gui.drawRectangle(
                SCREEN_WEIGHT - outputCellSize,
                (o - 1) * outputCellSize,
                outputCellSize,
                outputCellSize,
                "white",
                outputActivated(outputNeuron) and "red" or "black")
    end

    -- intermediates
    local inputsRight = gridPositionFromNeuronIndex(#reseau.neuronsByLevel[1] - 1).x * inputCellSize + inputCellSize
    local outputLeft = SCREEN_WEIGHT - outputCellSize
    local nbCouches = #reseau.neuronsByLevel - 2
    local spaceX = math.floor(((outputLeft - inputsRight) - (nbCouches * inputCellSize)) / (nbCouches + 1))
    local spaceY = 35
    for c = 2, #reseau.neuronsByLevel - 1 do
        for n, neuron in ipairs(reseau.neuronsByLevel[c]) do
            gui.drawRectangle(
                    inputsRight + spaceX + (c - 2) * (spaceX + inputCellSize),
                    (n - 1) * (inputCellSize + spaceY),
                    inputCellSize,
                    inputCellSize,
                    "black",
                    nil)
        end
    end
end

--- @return Position[]
function getSprites()
    local cameraX = memory.read_s16_le(0x1462)
    local cameraY = memory.read_s16_le(0x1464)

    local sprites = {}
    for i = 0, NB_SPRITES - 1 do
        local status = memory.readbyte(0x14c8 + i)
        if status ~= 0 then
            local spriteX = memory.readbyte(0xe4 + i) + memory.readbyte(0x14e0 + i) * 256
            local spriteY = memory.readbyte(0xd8 + i) + memory.readbyte(0x14d4 + i) * 256

            local screenX = spriteX - cameraX
            local screenY = spriteY - cameraY

            -- visible by player?
            if 0 < screenX and screenX < SCREEN_WEIGHT
                    and 0 < screenY and screenY < SCREEN_HEIGHT then
                local gridX = math.floor(TAILLE_TILE * (screenX / 256)) + 1
                local gridY = math.floor(TAILLE_TILE * (screenY / 256)) + 1
                table.insert(sprites, { x = gridX, y = gridY })
            end
        end
    end
    return sprites
end
function runDebugSprites()
    savestate.load(NOM_SAVESTATE)
    local interval = 10
    local rep = 0
    while true do
        rep = rep + 1
        if rep % interval == 0 then
            console.clear()
            gui.clearGraphics()
            for i = 0, 15 do
                for j = 0, 15 do
                    gui.drawRectangle(i * 16, j * 16, 16, 16, "black")
                end
            end

            for _, sprite in ipairs(getSprites()) do
                gui.drawRectangle((sprite.x - 1) * TAILLE_TILE, (sprite.y - 1) * TAILLE_TILE, TAILLE_TILE, TAILLE_TILE, "black", "red")
            end
        end
        emu.frameadvance()
    end
end

--- @return Position[]
function getTiles()
    local cameraX = memory.read_s16_le(0x1462)
    local cameraY = memory.read_s16_le(0x1464)
    local sprites = {}
    for i = 1, SCREEN_WEIGHT / TAILLE_TILE, 1 do
        local xT = math.floor((cameraX + ((i - 1) * TAILLE_TILE) + 8) / TAILLE_TILE)
        for j = 1, SCREEN_HEIGHT / TAILLE_TILE, 1 do
            local yT = math.floor((cameraY + ((j - 1) * TAILLE_TILE)) / TAILLE_TILE)
            if xT > 0 and yT > 0 then
                local tile = memory.readbyte(0x1C800 + math.floor(xT / TAILLE_TILE) * 0x1B0 + yT * TAILLE_TILE + xT % TAILLE_TILE)
                if tile == 1 then
                    table.insert(sprites, { x = i, y = j })
                end
            end
        end
    end
    return sprites
end
function runDebugTiles()
    savestate.load(NOM_SAVESTATE)
    local interval = 10
    local rep = 0
    while true do
        rep = rep + 1
        if rep % interval == 0 then
            console.clear()
            gui.clearGraphics()
            for _, tile in ipairs(getTiles()) do
                console.log(tile.x .. "/" .. tile.y)
                gui.drawRectangle((tile.x - 1) * TAILLE_TILE, (tile.y - 1) * TAILLE_TILE, TAILLE_TILE, TAILLE_TILE, "black", "red")
            end
        end
        emu.frameadvance()
    end
end

--- @return Generation
function firstRandomGeneration()
    local population = {}
    for i = 1, NB_INDIVIDU_POPULATION do
        local individu = firstRandomIndividu(NB_INPUTS_SPRITES + NB_INPUTS_TILES, #BUTTONS)
        table.insert(population, individu)
    end
    return population
end

-- Crée la nouvelle basée sur la mutation du #1 avec les N suivants
--- @param previousGeneration Generation
--- @param scoreByIndividu { individu: Reseau, score: number }[]
--- @return Generation
function nextGeneration(previousGeneration, scoreByIndividu)
    shuffle(scoreByIndividu) -- avoid keep same individu when scores are equals

    table.sort(scoreByIndividu, function(a, b)
        return a.score > b.score
    end)
    local bestIndividu = scoreByIndividu[1].individu
    if #previousGeneration > 1 and scoreByIndividu[1].score ~= scoreByIndividu[2].score then
        console.log("Generation with a #1 !!!")
    end

    local nextGeneration = {}
    -- keep the best
    table.insert(nextGeneration, bestIndividu)
    -- try improve the best
    if #nextGeneration < #previousGeneration then
        local bestItself = reproduireIndividus(bestIndividu, bestIndividu)
        bestItself = mutateIndividu(bestItself)
        table.insert(nextGeneration, bestItself)
    end
    -- reproduce #1 with #2
    if #nextGeneration < #previousGeneration and #previousGeneration >= 2 then
        local second = scoreByIndividu[2].individu
        local bestChild = reproduireIndividus(bestIndividu, second)
        bestChild = mutateIndividu(bestChild)
        table.insert(nextGeneration, bestChild)
    end
    -- reproduce the best with the others
    while #nextGeneration < #previousGeneration do
        local skipBestAndSecond = 2
        local otherIndex = skipBestAndSecond + math.floor(math.random() * TOP_CLASSEMENT * (#previousGeneration - skipBestAndSecond))
        local candidateIndividu = previousGeneration[otherIndex + 1]
        local childIndividu = reproduireIndividus(candidateIndividu, bestIndividu)
        childIndividu = mutateIndividu(childIndividu)
        table.insert(nextGeneration, childIndividu)
    end
    return nextGeneration
end

--- @param nbInputs number
--- @param nbOutputs number
--- @return Reseau
function firstRandomIndividu(nbInputs, nbOutputs)
    if RESTORE ~= nill then
        return RESTORE
    end

    local initialValue = 0

    local neuronsByLevel = {}
    -- first = input
    local inputs = {}
    for x = 1, nbInputs do
        table.insert(inputs, initialValue)
    end
    table.insert(neuronsByLevel, inputs)
    -- intermediates
    for x = 1, NB_COUCHE_CACHEES do
        local level = {}
        for x = 1, TAILLE_COUCHE_CACHEE do
            table.insert(level, initialValue)
        end
        table.insert(neuronsByLevel, level)
    end
    -- last = outputs
    local outputs = {}
    for x = 1, nbOutputs do
        table.insert(outputs, initialValue)
    end
    table.insert(neuronsByLevel, outputs)

    local weightsByLevel = {} -- from level > source neuron index > target neuron index
    for c = 1, #neuronsByLevel - 1 do
        local fromNeuron = {}
        for from = 1, #neuronsByLevel[c] do
            local toNeuron = {}
            for to = 1, #neuronsByLevel[c + 1] do
                table.insert(toNeuron, 0)
            end
            table.insert(fromNeuron, toNeuron)
        end
        table.insert(weightsByLevel, fromNeuron)
    end

    local individu = {
        neuronsByLevel = neuronsByLevel,
        weightsByLevel = weightsByLevel,
    }

    mutateIndividu(individu)

    return individu
end

--- @param weight number
--- @return number
function mutateWeight(weight)
    if math.random() < MUTATION_PROBA then
        local rate = MUTATION_RATE * (math.random() - 0.5)
        weight = weight + rate
        if weight < 0 then
            weight = 0
        end
        if weight > 1 then
            weight = 1
        end
    end
    return weight
end

--- @param reseau Reseau
--- @return Reseau
function mutateIndividu(reseau)
    for c, level in ipairs(reseau.weightsByLevel) do
        for f, from in ipairs(level) do
            for l, weight in ipairs(from) do
                from[l] = mutateWeight(from[l])
            end
        end
    end
    return reseau
end

--- Simple AVG between 2 individus
--- @param reseau1 Reseau
--- @param reseau2 Reseau
--- @return Reseau
function reproduireIndividus(reseau1, reseau2)
    local neuronsByLevel = {}
    for c = 1, #reseau1.neuronsByLevel do
        local level = {}
        for n = 1, #reseau1.neuronsByLevel[c] do
            table.insert(level, 0) -- computed during propagation
        end
        table.insert(neuronsByLevel, level)
    end

    local weightsByLevel = {}
    for c = 1, #reseau1.weightsByLevel do
        local fromNeuron = {}
        for from = 1, #reseau1.weightsByLevel[c] do
            local toNeuron = {}
            for to = 1, #reseau1.weightsByLevel[c][from] do
                local avgWeight = (reseau1.weightsByLevel[c][from][to] + reseau2.weightsByLevel[c][from][to]) / 2
                table.insert(toNeuron, avgWeight)
            end
            table.insert(fromNeuron, toNeuron)
        end
        table.insert(weightsByLevel, fromNeuron)
    end

    return {
        neuronsByLevel = neuronsByLevel,
        weightsByLevel = weightsByLevel,
    }
end

--- @param value number
--- @return boolean
function outputActivated(value)
    return value >= 0.5
end

--- @param value number
--- @return number
function sigmoid(value)
    return value / (1 + math.exp(-1 * value))
end

--- @param reseau Reseau
--- @param inputs number[]
function updateInputsRecomputeLinkToOutputs(reseau, inputs)
    -- 1st level: inputs
    for i, input in ipairs(inputs) do
        reseau.neuronsByLevel[1][i] = input
    end

    -- intermediates
    for c = 2, #reseau.neuronsByLevel do
        for n, neuron in ipairs(reseau.neuronsByLevel[c]) do
            local weightedSum = 0.0
            for p, previous in ipairs(reseau.neuronsByLevel[c - 1]) do
                local weight = reseau.weightsByLevel[c - 1][p][n]
                weightedSum = weightedSum + weight * previous
            end
            reseau.neuronsByLevel[c][n] = sigmoid(weightedSum)
        end
    end

    local outputs = {}
    for o, neuron in ipairs(reseau.neuronsByLevel[#reseau.neuronsByLevel]) do
        table.insert(outputs, outputActivated(neuron))
    end
    return outputs
end

--- @param individu Reseau
function determineInputsThenRecomputeNetworkThenDetermineOutputs(individu)
    local inputs = {}
    for i = 1, NB_INPUTS_SPRITES + NB_INPUTS_TILES do
        table.insert(inputs, 0)
    end
    -- #1: sprites
    for _, sprite in ipairs(getSprites()) do
        local i = neuronIndexFromGridPosition({ x = sprite.x, y = sprite.y })
        inputs[i + 1] = ENEMY_ENABLED
    end
    -- #2: tiles
    for _, sprite in ipairs(getTiles()) do
        local i = NB_INPUTS_SPRITES + neuronIndexFromGridPosition({ x = sprite.x, y = sprite.y })
        inputs[i + 1 - 1--[[because append to existing]]] = ENEMY_ENABLED
    end

    local outputs = updateInputsRecomputeLinkToOutputs(individu, inputs)

    local newButtons = {}
    for o, enabled in ipairs(outputs) do
        newButtons[BUTTONS[o]] = enabled
    end
    newButtons.Right = true -- first version: all the way to the right
    joypad.set(newButtons, 1)
end

--- @return boolean
function niveauFini()
    return memory.readbyte(0x0100) == 12
end

--- @return number
function getMarioScore()
    return memory.read_u24_le(0x0f34)
end
--- 1 per digit
--- @return number
function getTimer()
    return memory.read_u8(0x0F31 + 0) * 100 + memory.read_u8(0x0F31 + 1) * 10 + memory.read_u8(0x0F31 + 2) * 1
end
function computeScore()
    local maxTime = 300
    local totalTime = maxTime - getTimer()
    if totalTime == maxTime then
        -- blocked
        return (0) + getMarioScore()
    else
        return totalTime + getMarioScore()
    end
end
function runDebugScore()
    savestate.load(NOM_SAVESTATE)
    local interval = 10
    local rep = 0
    while true do
        rep = rep + 1
        if rep % interval == 0 then
            console.log(getMarioScore())
            console.log(getTimer())
            console.log("=> " .. computeScore())
        end
        emu.frameadvance()
    end
end

--- @param individu Reseau
function play(individu)
    savestate.load(NOM_SAVESTATE)
    while true do
        determineInputsThenRecomputeNetworkThenDetermineOutputs(individu)
        emu.frameadvance()
        if DRAW then
            drawReseau(individu)
        end
        if niveauFini() then
            return computeScore() -- TODO append time
        end
    end
end

function runIA()
    local population = firstRandomGeneration()
    for generation = 1, NB_GENERATIONS do
        console.log("Génération " .. generation .. "/" .. NB_GENERATIONS)
        local scoreByIndividu = {}
        for i, individu in ipairs(population) do
            local score = play(individu)
            console.log("> Individu " .. i .. "/" .. #population .. " with score " .. score)
            table.insert(scoreByIndividu, { individu = individu, score = score })
        end

        population = nextGeneration(population, scoreByIndividu)
    end
end

if PROGRAM == "IA" then
    runIA()
elseif PROGRAM == "DEBUG SPRITES" then
    runDebugSprites()
elseif PROGRAM == "DEBUG TILES" then
    runDebugTiles()
elseif PROGRAM == "DEBUG SCORE" then
    runDebugScore()
end
