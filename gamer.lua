json = require "json"

console.clear()
gui.clearGraphics()

NOM_SAVESTATE = "C:/Users/10131571/Documents/maria/Super Mario World (Europe) (Rev 1).Snes9x.QuickSave0.State"
BUTTONS = {
    --"A", -- saute en tournant
    "B", -- saute
    --"X", -- ?
    --"Y", -- ?
    --"Up", -- regarde en l'air ?
    --"Down",
    --"Left",
    --"Right",
}

-- Functions (uncomment target program)
PROGRAM = "IA"
--PROGRAM = "DEBUG SPRITES"
--PROGRAM = "DEBUG TILES"
--PROGRAM = "DEBUG SCORE"

-- Debug & Test
RESTORE = nil
--RESTORE = json.decode('{"weightsByLevel":[[[0.4723006714997,0.083580053707459,0.063452151428363,0.65348037400942,0.20787647016512],[0.71375950417341,0,0.67222736228611,0.71101613621849,0.057537553550898],[0.34017305033258,0.27248415260637,0.24290079381464,0.21971790339234,0.56733969166355],[0.14691388660128,0.38092119701854,0.51060524315633,0.14432389946529,0.30584962116715],[0.20997032221688,0.10302221182517,0.07996272472137,0.40158026014956,0.090610798594547],[0.8130940719866,0.011459870637941,0.40915020377153,0.12954323420852,0],[0.31805043702376,0.83343764538574,0.30770896084704,0.48458326077697,0],[0.09565681440516,0.29085047607202,0.38488982046266,0.24296382685171,0.38154014764101],[0.65744568145876,0.69434462029363,0.29638828950088,0.20520667436665,0],[0.67119727766604,0,0.1294462057396,0.010681772079718,0.043251598906129],[0.071319156825506,0.53101888333319,0.55120845374702,0.57108370839172,0.07595236267546],[0.65266313833714,0.037538374925187,0.24285176918475,0.30206139831411,0.098421643056656],[0,0.41990949964938,0.18042666389843,0.17537339181825,0],[0.13263212958877,0,0.076234560436153,0.41739606743062,0],[0.054657647248782,0.47159278455533,0.078700756109091,0.026725404634297,0.0044001541653081],[0.31909673771834,0.4831609496137,0.52935269245728,0.59944700751859,0.2716195035203],[0,0.11844326850794,0.0071523347757454,0.020261097779847,0.4982644113865],[0.89665148446659,0.30300514093226,0.14358880700511,0.20738961955444,0.57449372888333],[0.22645032224456,0.0022335399704687,0.20347296592304,0.083487847520647,0.7124833971721],[0.010419504450925,0.12572378486435,0.3171886720404,0.24910712377003,0.22661660126752],[0.60624254019135,0.32570809675544,0.34926836422257,0.20587236046371,0.16538795564518],[0.28008656118119,0,0.40158254860572,0.51776632602677,0.057265729601423],[0.32234423943383,0.55113525789213,0.25213774188344,0.34253640594193,0.82123321923633],[0,0.29155371214484,1,0.25970014303905,0],[0.5172601091342,0,0.044608074818825,0.40858209673407,0.071527369444468],[0.60705742141143,0.28807350562765,0.52403573748909,0.39055994421176,0.19440771104306],[0.060830288889384,0,0.96422953086943,0.81117346862317,0.41062281057839],[0.030623250187067,0,0.029173472110512,0.70910203719649,0.1886983585504],[0.36693778660424,0.41976311029341,0.35402963891039,0.44400953222775,0.059155282357278],[0.54772899315047,0.5938842956784,0.49908859629161,0.27016533893586,0.2918355211564],[0.067735275348108,0.38471574197221,0.37635839648607,0.40400598258613,0.29874905059496],[0.082610951628675,0.073132460126073,0.41892580724529,0.23760453483261,0.1742078411989],[0.070210879290051,0.35231842331228,0.50702235725165,0.58481319543795,0],[0.52789343408848,0.10979766909326,0.033144988422839,0.075448902597034,0],[0.49490333508936,0.12646378505433,0.055786391581886,0.79908827726543,0.60367914586947],[0,0.1483169465373,0.096580592573286,0.2332671995625,0.1043266063705],[0.68149557277564,0.0758545222308,0.52505536191173,0.28637190552704,0.37756285298548],[0.2206335899421,0.42254780170189,0.47302228991563,0.1626829220258,0.18909796755944],[0.69418675997152,0.76224864124882,0.18853135174187,0.41846358650853,0.078699711229472],[0.45542346307913,0.040519706928331,0.2231813692627,0.49500114841834,0],[0.04101726377295,0.11712590282599,0.079930413688666,0.71553117175941,0.70766760093479],[0.32446973865528,0,0.12424654255321,0.22039255063692,0],[0.88371417160759,0.32482535724977,0.36267917993409,0.14060592086871,0.27250064654871],[0.89481723803886,0.51363794566357,0.56324467724053,0.19268084837038,0],[0.33318864479447,0.53773052638501,0.48263175341681,0.10627314672504,0.31626822307812],[0.094017088128436,0.024808049982644,0.29229730222791,0.69515138057802,0.11892992137129],[0.80445992523103,0.1137864273773,0.13986107088204,0.90736280385061,0.77775045764284],[0.034999523782736,0.3500468492224,0.703495739213,0.21506446194411,0.4542812157229],[0.28132167988586,0.40585215326971,0.1513615734957,0.091613048311024,0.29775937787691],[0.28875023941392,0.45735133840402,0.16044293589366,0.52473190811347,0.54617814649238],[0.37901395964658,0.46650270715264,0.77181372313699,0.25723737845667,0.27948868010311],[0.37946574980341,0.03379561020373,0.043653305334109,0.95050758336345,0.33002747897453],[0.069357103232149,0,0.43011275831553,0.39675647319992,0.40691671516007],[0.23978690697416,0.95596804900765,0.073267264172741,0.17962485030171,0],[0.2477589960606,0.16436508393982,0.36152267476248,0.18075449822289,0.05907273061519],[0.36105479995864,0.48026993764696,0.37789879949526,0.072527449129196,0.31818510836727],[0.1473791651701,0.25395993262357,0.24609752587651,0.22296928647112,0.68619367737091],[0.27282503174119,0.83217192141518,0.075611401521643,0.13887286168323,0.48482293167321],[0.55472874541921,0.081634670311637,0.47447556355189,0.02635676627707,0.15122993697962],[0.21520714793551,0.15335172970168,0.4592009114468,0.095623161300928,0.13807183152308],[0.28615295112656,0.26911190214799,0.64375545932672,0.1499041802389,0.20122021684722],[0,0.25334654360927,0.46971626025949,0.6858715345752,0.51576942155954],[0,0.18331808705238,0.20405173915401,0.14363877788807,0.17807055421566],[0.084918747968002,0.65079641983056,0.24547864676483,0.70198738336878,0.50228763966312],[0.10598281753216,0.015180356266764,0.099281941294981,0.61140285100327,0.52917047362738],[0.39294858135738,0.58280528374039,0.51475072069288,0.36894815264133,0.19249359934965],[0.22053331991688,0.23826617151978,0.40548646848825,0.55483007683368,0.71132384997742],[0.19648306778796,0.24348097367067,0.0013299262887597,0.54552961774212,0.21601118237802],[0.82478025919643,0.50095669779643,0.29795349054008,0.060699602621665,0.38618030189361],[0.2111810860631,0.16481253392866,0.043712021421253,0.34847348557822,0.1938673876881],[0.66672877929999,0.52706313653721,0.31150207941165,0.71242558895865,0.42844698525625],[0.65206964875934,0.44781296929741,0.56925634795617,0.34953012719219,0.73376313354794],[0.0028457677015057,0,0.30757882804184,0.32092903166747,0.29687805766142],[0.44514919724993,0.36434425359108,0.24478269664454,0.47041694071822,0.3278359885362],[0,0.12041281572197,0.35103477218998,0.24795716242297,0.062348535933606],[0.36851232627416,0.11758195189651,0.16659114867116,0.23251447400509,0.16336273265984],[0.18232677281705,0,0.18766255000004,0.16334403371808,0.28332685701322],[0.7215459617187,0.61592102482474,0.48850060567777,0.92610690924221,0.11506956272261],[0.40794820977498,0.013793132024442,0.15772183762439,0.12868872012837,0.15655994450658],[0.36521550952932,0.91769215196122,0.28389501187172,0.47009554759982,0.44295817009421],[0.74221589615483,0.053548178753713,0.42568841341603,0.1995911359244,0.22267322145393],[0,0.066737338626947,0.17836842719567,0.51515652183218,0.85655814336761],[0.10225273658528,0.1655155031955,0.73599659513438,0,0.3204673304961],[0.014396748337142,0.51279647095202,0,0.058169243651455,0.39654539381697],[0.09714106629489,0,0.32605961510603,0.33565407658373,0.069724972738279],[0.86901956369487,0.66426893483034,0.04710251002545,0.1333022720736,0.71527851000386],[0.2615712247083,0.48490702605354,0.02960495680055,0.99917713231924,0.36257052205115],[0.23623016211196,0.41380330605334,0,0.20656713575557,0.33847782940664],[0.48498316353503,0.14933671002874,0.094264434726354,0.47086031680481,0.079354077524653],[0,0.56220581342284,0.27024211169058,0.070627727196492,0.1723093347755],[0.16998908268305,0.048144772447108,0.85172565592677,0.13187190780794,0.50141666149148],[0.75928241664595,0.76927561917393,0.7655298169841,0.30426008266101,0.88689519233257],[0.40604913164038,0.15563672698189,0.66177348442542,0.053376677104856,0.056919376270181],[0.32904673944898,0.31668690205334,0.065045989401097,0.0033128613219209,0.15616098792114],[0,0.69532721970541,0.8828588373697,0.43932057474366,0.31280209959428],[0.24413966064981,0.55071814684393,0.25947739186945,0.49812671580845,0.25562580177886],[0.062099085812964,0,0.58004222591017,0,0.36487479277048],[0.041874548863791,0.080924988594705,0.27758803267091,0.15223275609248,0.17282191970536],[0.48993991763597,0.57711724885064,1,0.9254995519169,0.29826725209537],[0.94228318272875,0.56261057840735,0.5671644693627,0.28631385093479,0.17597025746921],[0.1548262039382,0.15191371721988,0.12702799847173,0,0.30743241106707],[0.086015383279417,0.19144811218448,0.40617507205893,0.85207239852623,0.32024845171246],[0,0.563498263349,0.69033272442408,0.10344934847438,0.2065832615831],[0.30126424839226,0,0.34605122230864,0.31683354805318,0.070146218161651],[0.42837084776481,0.65870149161434,0.1671799599494,0.39386790936153,0.010137790027012],[0.096860089605392,0.26861586847048,0.1774893018981,0.55294173250248,1],[0.41310510424844,0.18426841124306,0,0.34421297218106,0.85266104668483],[0.087754524746788,0,0.23796997366226,0.1012785415433,0.055029001007392],[0.089192129117092,0.78412405525743,0.11159983606264,0.30093099427512,0.57854103988486],[0.049828189537383,0.093165532948516,0.50334856431674,0.17060648249404,0.29089959190262],[0.003326021920206,1,0.48723930130929,0.69938900997012,0.097735863611835],[0.33240082146734,0.72084886247727,0.0030544715049724,0.17533854087094,0.19944369792445],[0.089975473843121,0.31406762023288,0.069395931065433,0,0.66134736219536],[0.31750494425986,0.0057464668525103,0.75641863381919,0.4297315866114,0.2554581246097],[0.56486163410567,0.13715920420179,0.27448882714746,0.18616334504578,0.23594440513174],[0.12894326585741,0.15184340142614,0.69561443503418,0.15840092965905,0.25323074856607],[0.5141363874404,0.68939472427554,0.85081544475668,0.01493745148729,0.4904180480623],[0.26217539138641,0.24000269917354,0.21332013393782,0.050063973688512,0.62463156222375],[0.51448732810585,0.36402899337116,0.4287795690446,0.18654447819754,0.37049014281751],[0.22404788556704,0.7672143519153,0.34977004217631,0.1031762939095,0.035767425040376],[0.13179239799191,0.29686901461997,0.91397923534126,0.54368587840697,0.6338728563859],[0.82859854124408,0.33841598188204,0.13599135663916,0.17890103314156,0.45215190853017],[0.51038062740763,0.0034638076320774,0.15133409705658,0,0.24604888292819],[0.21158016358018,0.02429989963702,0.48268832975396,0.72682307145091,0.29864222504246],[0.32017958642211,0.33344233783792,0.23196349535924,0.48171096247052,0.85086161024564],[0.026745337533896,0.40032913119515,0.11553559821693,0.34906347301735,0.83309112283132],[0.21976320652349,0.31836538749445,0.28034544251693,0.046920007732109,0.093728433525426],[0.86748933707241,0.47603148846203,0.83524811503441,0.57876743408637,0.67285253069243],[0.38583429785971,0.13437282285183,0.43798973627626,0.12136606597092,0.060433015300933],[0.27921215016057,0.45219979821824,0.6706708348509,0.2335564849265,0.6366755748919],[0.9074611331212,0.14304802307497,0.53528194625385,0.17390837827734,0.55876536917362],[0.22387797845545,0.58407258969425,0.37669143712318,0.36664726588933,0],[0.63250072052329,0.49282173441432,0.11460347165194,0.17615992711602,0.8728659609336],[0.013216063577859,0.74064604356964,0.00041236343506215,0.8195687147851,0.034658572752616],[0.047279122741805,0.5538572405487,0.0049104532002884,0.015996718175892,0.029496266075506],[0.078315166125563,0,0.30902713936663,0.44738368498819,0.40550222598454],[0.79296270553753,0.18393323355406,0.041007486329702,0.3898826017144,0.016553601298865],[0.61114662965801,0.2687293984213,0.57230252222391,0.044632225875004,0.77484840913282],[0.058448609660505,0.36599484687307,0.55417693542132,0.85259218860646,0],[0.54288176966907,0,0.29415477821706,0.55100659231029,0],[0.046750452798915,0.20259308642683,0.52517485720012,0.27475385647395,0.52395225006614],[0,0.01147405633107,0.046993753589771,0.44517069554969,0.44151378555896],[0.50323070191188,0.45752996986876,0.88244152383365,0.099088157613089,0.084462228245676],[0.13874279463352,0.51857885665064,0.6182556540376,0.80610633434295,0.53953343237472],[0.091521152031116,0.19953752734664,0.67686859232657,0.2167791275918,0.53918963274129],[0.37760780984294,0.67148022660557,0.54346571728748,0.25517913059038,0],[0.21921543436617,0.23698247593225,1,0,0.59478126683032],[0.67376834384795,0.074457954835847,0.31800346804075,0.39991185142491,0.32251886065244],[0.12903160052371,0,0.24690144665025,0.56458974024685,0.72782647502789],[0.8280199053175,0.71129866075929,0.11960909486779,0.44541100354797,0.43244915923895],[0.096351417524416,0.20997720529473,0.20963393498296,0.27271214140599,0.31770325658856],[0.14525681808367,0.071269572804604,0.84582791382017,0.031994606234956,0.59795522565773],[0.2488801125372,0.072212752923048,0.36599552218733,0.0015303771439646,0.10318934534397],[0.30444604990134,0.058538035785001,0.31869548871489,0.07538587506291,0.7733161879497],[0.049922199834398,0.78480751097323,0.39890934389642,0.54213178423149,0.42864675215443],[0.62158982449813,0.19718265335592,0.49765036291435,0.29892404289504,0.0052434949261163],[0.16204250066358,0.27380754312818,0.28387883168791,0.46317260407752,0],[0.15555478375076,0.24533653238101,0.38370756807441,0.48416892436186,0.25395305825411],[0.085677430353053,0.23698473997795,0,0.23209759717787,0.51656516764759],[0.69782157746909,0.051012233927248,0.25510538161601,0.34071993029661,0.54308558494975],[0.42217122716347,0,0.75734415582303,0.25539640916197,0.096857897193447],[0.55241854282985,0.075973606623965,0.50918995249751,0.044223018683848,0.36281573866958],[0.52314091273472,0.015038098433612,0.0089871857296034,0.86544885638767,0.034299072605313],[0,0.11742961483649,0.28317060055453,0.0084138980524461,0.32427956286527],[0.079407306453219,0.10986370161225,0.16684574113884,0.21915096903166,0.10280035430555],[0.33131619791653,0.72199172258527,0.12436138158403,0.95702090825399,0.076463614902043],[0.92958526832486,0.89876163616791,0.48805175324216,0.55180925737671,0.58858529605904],[0.46727576855016,0.1971989122832,0,0.11717558650778,0.071316022250744],[0.27954410187109,0,0.030580851295035,0.53502148990598,0.14638899532768],[0.16793467077326,0.30315935882718,0.76975362394053,0.11385389802505,0.09587150391533],[0.21450881217441,0.44218365415487,0.47012982076627,0.63517279071284,0.12357139337535],[0.01207137630145,0.20803670606817,0.019383347772728,0,0.58743787537825],[0.042118938246893,0.24839255781501,0.099971206314208,0.11739109414498,0.25328793097158],[0.1465415009575,0.22205290403196,0.052596304816129,0.056387999082528,0.62901371002191],[0.5317984638862,0.2036160712331,0.36091816149346,0.56865649016441,0.43669312057844],[0.34040109424082,0.45982476308707,0.40742363968432,0.36187541236422,0.72434117142497],[0.12513519317142,0.24362843940446,0.88135957726136,0.27495653154694,0.14625504794617],[0.20264151351457,0.22334610516805,0,0.2506078505469,0.21519372629615],[0.8687205842707,0.040282795982984,0.14059747073174,0.1031577862503,0.04659894397041],[0.78568906315392,0,0.11895159490095,0.34432247346416,0.7230923621704],[0.23550233316448,0.48360657052159,0.017772434594351,0.2693979160701,0.0245142626409],[0.050612699479631,0.43071495701663,0.051930826029719,0,0.053713245188152],[0.40404052811998,0.035536013752574,0.21600514238223,0.59535566411077,0.31165965889239],[0.42730589646644,0.29706107515041,0.29596296665149,0.2520519662074,0.70372473289642],[0.87336759068493,0.45864650660728,0.12860505233442,0.61272939267627,0],[0.64036993867392,0.79215551815358,0.33632220440154,0.26103147892609,0.63092459161662],[0.091900382363904,0.43097228857545,0.089532525617678,0.030720327465436,0.53393621417456],[0.31905278936543,0.40664389856799,0.29551095262715,0.30481406736022,0.93284098321016],[0,0.54335942733593,0,0.12728347387092,0.075999370293057],[0.38115578320815,0,0.026734832812085,0.46462347080505,0.11922764059901],[0.08553115648897,0.19794481034835,0.38798785578223,0.33014095730987,0.63455250002357],[0.50635541166992,0.083458389264458,0,0.53926065035711,0.22134467086606],[0.3845929866105,0.22384133693287,0.45933201851161,0.51976709358985,0.070908346374115],[0.06112166153325,0.32322778373191,0.52954821556638,0.8016417565882,0.19221344234163],[0.087238253291229,0.26152747515671,0.54369970112353,0.22507588451231,0.14633886678039],[0.52165074836319,0,0.35338255941841,0.28141723820311,0.30280792181226],[0.46693839450685,0.22805533674146,0.30531879456677,0.032355748961078,0.81123707146605],[0.77711266562331,0.11493428253113,0.026700065966045,0.56393110919499,0.30892415095074],[0.53536534007745,0.43732868796804,0.051577755295383,0.62639250119636,0.40476565425117],[0.599458392144,0.52378708702515,0.145943978977,0,0.33742360372731],[0.07911428089972,0.44332007952362,0.40386110827065,0.32423699344151,0.66595925344774],[0.26637400005405,0.37052885209134,0.27271321284579,0.12043499455474,0],[0.89467050022661,0.66287736862472,0,0.080383718291367,0.4524611392937],[0,0.21367412001816,0.4926060842159,0.06240100646605,0.17979822724358],[0.21192647255665,0.16097029688899,0.63195186986107,0.091748274349159,0.32121004384295],[0.13197210210933,0.031529912494268,0.23481910427098,0.57750527211429,0.34831403212867],[0.51905554793668,0.14470315328005,0.63816541564783,0.36599653275141,0.20480149282767],[0.2762883690632,0,0.43444033273189,0.04952139647025,0],[0.35022674004448,0.22569619170092,0.62703746370379,0.038358225225477,0.71611774053254],[0.16143211879089,0.45143190820071,0.63719241892787,0.24800668369097,0.38364005671212],[0.01463772341897,0.10625641702566,0.4656083420046,0.40921579659239,0.063751170603754],[0.49132714380458,0.82302429628796,0.47622350331568,0.55994181777981,0.025299418948643],[0.11363500886447,0.85546386685208,0.086424994325252,0.13564410133056,0.24639546598553],[0.64324449436209,0.14591527290541,0.54326072778394,0,0.57410186298757],[0.56252565266845,0,0.096577899322313,0.47387582002661,0.26776935412116],[0.33692999789561,0.62387273972113,0.098358001189098,0.12790307858069,0.26425845018198],[1,0.068373675736618,0.29299689049844,0.26847590177927,0.0045570544832283],[0.45371218395875,0.68655844453029,0.087707653494269,0.065728502156739,0.62750603183339],[0.38712807516697,0.16226671296256,0.37749965736842,0.78258161112146,0.57751294481103],[0.056195812984654,0.33591505274499,0.74007438066104,0.35526754921466,0.87644831754618],[0.40283945288692,0.6367690690793,0.15359377684195,0.098243303413275,0.22881650047422],[0.64421425076306,0.42494175170449,0.1726463712305,0.2135377774371,0.20766016980018],[0.058874184838286,0.1730768909854,0.2605176413106,0.71033413650398,0.3863726988802],[0.19225675099863,0.54245839122655,0.27943748501134,0.42964830733622,0.040031059380896],[0.18516400996599,0.74401174412775,0.79765817334788,0.056934653430923,0.80653013815019],[0,0.0068840209914022,0.27271411007497,0.31073194435946,0.019323420449485],[0,0.14812769971672,0.32262685917458,0,0.11408119611769],[0.10149452024985,0.3751616036363,0.069043080361835,0.12566872073056,0.50685455107707],[0.1434150253129,0.56262109624943,0.86419527775461,0.60622157237979,0.17624302618926],[0.69200479617067,1,0.24637200460229,0.43362731434237,0.13937194082283],[0.084577935133633,0,0.51586895161804,0,0.031663679781739],[0.17900043517449,0.62575956913258,0.49259239206946,0.10567978368475,0.16113804267063],[0.45148672137321,0.09019607098635,0,0.5462623002751,0.18262256938492],[0.10478950728168,0,0.10823193159907,0.39397468232831,0.32508818782217],[0.047973982905641,0.16957859704824,0.34391049161799,0.37757387067984,0],[0.32660235605889,0.5963416685271,0.21995268348592,0.067232081811027,0.17752485975385],[0.056566941386244,0.042266553718002,0.32160198370241,0.02677562241512,0.29799632090219],[0.091555392803,0.21395294984573,0.39925187694478,0.32006597983279,0.15858737828089],[0.2539405725633,0.32971127944227,0.034198028990266,0.35443280950644,0.13527595119223],[0.19716109910342,0.10731122630493,0.28637212674548,0.67485876477409,0.16378717997024],[0.092624550504198,0.62448623864583,0.22863841055747,0.4010451664621,0.41758073861676],[0.88963623089233,0.58653726344176,0.32441092719476,0.48405243073582,0.56676594928481],[0,0.36513859353883,0.031273200490848,0.70962033830092,0.29356836617318],[0,0.30338642876799,0.053419316177997,0.55261582691409,0.52760987482658],[0.51939802637922,0.286114848003,0.28216510862739,0.18868588379904,0.84264795354717],[0.017256534700079,0.019047728948763,0.26277028669202,0.26759069960941,0],[0.30896520522975,0,0.12443370714883,0.15657497634018,0.28193804838177],[0.27374663711754,0.52330525865084,0.21618549314614,0.32100314250169,0.20222076958139],[0.47115104639944,0.095835404741206,0.12300505429455,0.044908957109677,0.16771203274699],[0.43780461037331,0.14193031499284,0.068377727178377,0.81735321688917,0],[0.46682565514147,0.22965725050936,0.14393901005775,0.18247536605295,0.43215053982022],[0.22587589997396,0.092847498681949,0.32229332056803,0.13119346618491,0.79137412668591],[0.0047946717706287,0.01342320253631,0.27617840094324,0.75327578092279,0.12473926481292],[0,0.28413114746365,0.18080306748328,0.020490710607735,0.073393122384255],[0.49200647213457,0.66525132136187,0.3420047282061,0,0.81533348577011],[0.28017007775343,0.60734486836637,0.016971820475211,0.29384936740131,0.48763124885755],[0.42762282175801,0.56086067591476,0.097944115025818,0.30060638188375,0.055098453032845],[0.039932582122062,0.088425430774898,0.25729994043797,0.27488678549293,0.41698017491791],[0.073315493844124,0.16139571674083,0.35587204605547,0.19941891530708,0.34712338333018],[0.79371467338663,0.12890648124805,0.30199326462919,0.17365404318025,0.029820336922845],[0.066618488511394,0.23629274791327,0.96742119803559,0.46676130094845,0.70920769923363],[0.29264135967496,0.17059709528363,0.055045887919929,0.13749958828406,0.21323853950444],[0,0.35428705096932,0.1506109460128,0.34165950471973,0.086593810404931],[0.51787145222176,0.31250123552132,0.45058793835082,0.084455424961433,0.7384085387738],[0.10546829296252,0.40515174101658,0.29478225409173,0.080902559601607,1],[0.43574124708074,0.42379662225244,0.46951554878467,0.62065240685325,0.31735055914789],[0.4063632180949,0.061120004507255,0.40799319337109,0.058830698300296,0.36257258906846],[0.087586817190729,0.096960549589624,0.046973940000471,0.091488913262338,0.90564025848575],[0.63023699296036,0.20809674003775,0.87985220192916,0.64140200277433,0.57976788646778],[0.7849216375285,0.46150722355595,0.2931318080861,0.43322389870366,0.37884707307411],[0.4620791702069,0.26307508622388,0.33742426919973,0.16049198971738,0],[0.53559268610048,0,0.42561269093812,0.17486269096175,0],[0.15545241157163,0.31138964220362,0.47108801647094,0.58893739562632,0.18005078671139],[0.41716786055561,0.28622007040493,0.26017298677192,0.26781670089246,0.48437762528743],[0.12557521638181,0.67316594166358,0,0.37880197406492,0.55163398253469],[0.53508549057182,0.72450581315243,0.098873067404811,0.080628372925054,0.94193688729385],[0.393234045555,0.33150947564449,0.38621605173542,0.27105634963821,0.46899889524826],[0.66119710169824,0.21769158489907,0.17001269345711,0.34520747723745,0.14575255459699],[0.059610792141729,0.099557571007935,0.77471619938103,0.099856953311976,0.23187998315739],[0.18001298169777,0.042907877513592,0.56032918882585,0,0.61789719056211],[0.01185575964908,0.25745128129542,0.81129637762293,0.45212737598939,0.16151637447221],[0.8307097984204,0.019140283112139,0.23080520735983,0.15229676872641,0.24602508333123],[0.12233265936839,0.26832928754761,0.28035833728375,0.17325963690909,0.093680551391653],[0.028790820365561,0.05699616872821,0.067907593228602,0.71446085112085,0.27583326347552],[0.22852216964772,0.099199647057956,0.058831914448307,0.77033206916341,0],[0.11910900733974,0,0,0.092310415366713,0.14852149100557],[0.20250191224292,0.46404447962633,0.54704511719346,0.69188622531483,0.28800959040705],[0.53745872896821,0.39285772390647,0.5440769948636,0.64430142985125,0.65965080208108],[0.33394484602834,0.1030207248157,0.24238570439121,0.59725563836255,0.40554455167814],[0.027584723482545,0.90900998065179,0.28381035147277,0.09693226591204,0.82493068611762],[0.37002084302253,0.69657472750711,0.049620102388321,0.16207499423343,0.50801506035879],[0.51226624504715,0.10807029148986,0.42132092844102,0,0.42599540967738],[0.35349466523315,0.21307367745612,0.60252293785121,0.35715172660626,0.032891392023072],[0.91471940388957,0.38000337364835,0.053705382926509,0.93070171565737,0.71656584708887],[0,0.62442745070527,0.0081625404396059,0.44200233767563,0.49860591322679],[0.088189687039953,0.14183450207359,0,0.98117426302028,0.17551095696366],[0.18316480984563,0.50208579118142,0.1613800538392,0.37360556361513,0.66394456900901],[0.69657367857855,0.33573758186137,0.5157240342962,0.038727405502729,0],[0.60316105951039,0.27023156859485,0.23317050186759,0.052052400313764,0.52312140141902],[0.49679215248678,0.25100150954825,0.39455493119673,0.44942508456295,0.040428659222468],[0.30309672226403,0.34793484142059,0.64349436217317,0.59893754278745,0.29978421385433],[0.39633260199369,0.015778953388699,0.455703776287,0.064779359548763,0.32067353154227],[0.036727898128312,1,0.1152274407417,0.13790618268319,0.25544887405081],[0.022544823254869,0.1788957757909,0.66964682010743,0.014505126410017,0.029061258523717],[0.64399035211905,0.60270352636215,0.059581890215216,0.99955674172498,0.30251270622987],[0,0.78553440765612,0.49988241927478,0.35136338638742,0.079622730163912],[0.6962271382819,0.94543869620535,0.048896850628823,0.51028704392152,0.17994256948593],[0.0028756484332903,0.38883372204264,0,0.39283134988087,0.30434571484615],[0.22842041694473,0.055314627298962,0.64076968350643,0.36460231795473,0.30354651776674],[0.39821716686801,0.18908981913519,0.061134548935339,0.39685468762185,0.30774479592878],[0.74065959989866,0.27398014439593,0.47674585470667,0.16799130819504,0],[0.10758489201764,0.9844987538642,0.17544515066552,0.19005621441372,0.080215357181275],[0.55621422397182,0.44227736377523,0.19612298598972,0.21035385740726,0.1432776810107],[0,0.29112913010445,0.22695683436619,0.096297610483409,0.063285692161824],[0.085182382390745,0.32513476393935,0,0.58756125809158,0.61643712961881],[0.32800276058369,0.23780539537468,0.67202181081939,0.64827613503929,0.062516319014838],[0.078916667643247,0.14695777876906,0.019431515177307,0.294249769692,0.33544189917227],[0.45586043018946,0.74625857669487,0.64196481224038,0.31016002629998,0.39087993574108],[0.074489387514652,0.18817083791781,0.74486606571081,0.051102096366248,0.47170543394663],[0.47361983235664,0.63368399716826,0,0.25219998210469,0.13566444106773],[0.42400032904601,0.40777110406604,0.013990384652133,0.41343438778754,0.2633516917271],[0.45657069362982,0.32813913410732,0.22719810203023,0.47007582668556,0.062937558383507],[0.15417009574384,0.10260822970526,0.89735506400572,0.19852570154751,0.53408254007099],[0.16431850343219,0.10467809240742,0.41019264342294,0.12122980710471,0.39215808974046],[0.43165788155948,0.31025711588638,0.19107238174068,0.37400041253715,0.21715367374944],[0.11668181741376,0.43424010407981,0.22051240868514,0.40252391562428,1],[0.12849314037895,0.0021305329527161,0,0.39992268136639,0.1502306129971],[0.19093555030304,0.3948655728332,0.097567810774562,0.25280473745645,0.024755533051963],[0.0026709405161953,0.23206610559126,0.13193986354751,0.24694673273378,0.34014668395331],[0.097896950764677,0.47559736804305,0.76712264644475,0.25688182852138,0.24121505602956],[0.22128356083553,0.20521925532889,0.65960680177852,0.4009147935452,0.0068226447485883],[0.53223854513348,0.016864251109596,0.29859078145192,0.34337768724033,0.17334419307789],[0.4099463711783,0.68983172562174,0.47813981068617,0.45994188126772,0.68549550379524],[0.039312514943319,0.091425083749189,0.6455586841195,0.5776224713336,0.044104214482301],[0.079552043114905,0.29986894650894,0.67896191844462,0.47146032067558,0.62178265210824],[0.37997744705903,0.18264412845484,0.1900118771047,0.19565476568659,0.24505427645506],[0.45922068767965,0,0.42806778529126,0.28381372603162,0.23112434414868],[0.49331921439629,0.18879163164185,0.081355479561583,0.27960447660369,0.060311926165269],[0.10193878504492,0.60344669923314,0.21686000724063,0.091276957714051,0.38847481539835],[0,0.51097855125255,0.71595453139596,0,0.036097985420892],[0.62148585994575,0.4641241036887,0.11146992733724,0.19579613010224,0.30590207869464],[0.30647332192935,0.19565528621554,0.19552845411321,0.91589336325069,0.31953704825218],[0.48572115985311,0.36101969339817,0.20941624310367,0.25940538742462,0.28059382546063],[0.082871541815681,0.23674024285535,0.37592599147323,0.54109052465696,0.31721916410711],[0.14542418505702,0.43488190068347,0.082594248149081,0.84312135100355,0.15714077068993],[0.19155701563748,0,0.3912232603366,0.52119144680011,0.73327394071377],[0.16639224454881,0.0019324580324828,0.11469068500641,0.39859651314886,0.18051480371558],[0.26204597129278,0.37295295827267,0.95244806659583,0.26579737177125,0.17308344061936],[0.53342409834837,0.6812570809507,0.15641919266323,0.82156864450099,0.45702883064158],[0.42754190337,0.20129631642408,0.46216426240162,0.26408796057936,0],[0.28291100576646,0.22955144565885,0.13792296275993,0.011311196872011,0.88418852389636],[0.17464942137046,0.87866067075058,0.084727388529795,0.09939116335843,0.6331697791562],[0.14175741221268,0.33184730203425,0.17073862462128,0.66413097167847,0.10768982283626],[0.69045644694747,0.76965630047128,0.41404751096188,0.25050663438021,0.16344254777063],[0.022476363775055,0,0.13719714859961,0.37477319805071,0.13327170806723],[0.20802119497627,0.018163884413228,0.31817491438277,0.40966417948373,0.38518100452413],[0.6216714830279,0.56950641563356,0.21674239920354,0.14178500679561,0.9074548588764],[0,0.29452668765727,0.064309783149333,0.48193482440478,0.17327805084018],[0,0,0.88489553198171,0.037974116351081,0.043567552176896],[0.16917630182768,0.49741497609424,0.75551161998032,0.044389702494373,0.42868303450829],[0.051045935744439,0.10685902655781,0.53961524654884,0.075278460293636,0.70954163370604],[0.19687896735597,0.11671824015561,0.062633047922175,0.47616486514054,0.0023917307138664],[0.24176991220142,0.52138585894594,0.24161880206793,0.24725944671491,0.14966772088649],[0.38654193171631,0.26942199089915,0.01937090723653,0.24986173455674,0.27398678192732],[0.45162664734538,0.23393714918935,0.37011109211127,0.12610976066753,0.27690022476667],[0.32625990871998,1,0.24643717484847,0.75239343938124,0.58227651763923],[0,0.20163925384391,0.016554458604074,0.043255992374487,0.15541267353368],[0,0.31533742903097,0.15513880723972,0.64006404862462,0],[0,0.2582249153968,0.37356564978156,0.35756749442832,0.35334472241478],[0.048826896496598,0,0.075230031144026,0.38697919854615,0.64138429683516],[0.15515706985334,0.13246126616614,0.050098227750824,0.30283819935716,0.4296821029206],[0.26275740770509,0.24760995531277,0.1990019835834,0.15431104126176,0.6759996034873],[0.60384695238796,0.11785520291562,0.6258465081848,0.088574581587965,0.43288768076651],[0.60127880925045,0.068072003010153,0.6839452322657,0.36765228836504,0.18684543814277],[0.19187152153273,0.39900275223453,0.1682568689331,0.15806642014972,0.0033432661157005],[0.080381477593007,0.20878651935778,0.056222867972524,0.97238203849479,0],[0.096185452399621,0.16180057854316,0.25536067229433,0.48347400727405,0.027298821812159],[0.056192643160088,0.07132892937405,0.54982984643864,0.15701721193049,0.28235634796762],[0.018818577502045,0.97297890250164,0.23737112851668,0.84491277664453,0.014942467100655],[0.21627343169824,0.31196051104929,0.13380865442026,0.20759741783259,0.45023928186239],[0.37735246785483,0.046977020671361,0.022274477935074,0.12233257385122,0.30491826991174],[0.3075154167296,0,0.52793077285219,0.35728613620771,0.1094579102763],[0.11486995870242,0.28366498601205,0.086721714072886,0,0],[0.11367927364477,0.11009524666788,0.84943375201413,0.23877380162568,0.90904357126583],[0.33967183195388,0.62900406086266,0.0056792248625094,0,0.2421303138744],[0.033172021740937,0.21407491448604,0.58585242304109,0.16720230085217,0.75289354095004],[0.31714353805231,0.0098197247832914,0.1301309849639,0.17458387899442,0.47687240597533],[0.32671620564405,0.11890063977326,0.28516654562168,0,0.15498466195072],[0.31120280727628,0.7342517427972,0.25749328620186,0,0.004996795413478],[0.098900144707634,0.27616967313625,0.50864139817786,0.49935574171125,0.35182059469882],[0.41039097884517,0.064015278910141,0.054387446517024,0.32269456289581,0.4188374273649],[0.42444221793475,0.27286166810076,0.24674620043023,0.018970595506231,0.4240669314423],[0.33671961400103,0.036205031630633,0,1,0.31413453059267],[0,0.43925690483544,0,0.79304409707072,0.084547225797658],[0.5441354058074,0.58092124908329,0.36258023586026,0,0.26289770776778],[0.071627351301247,0.24927155400239,0.52989281452343,0.23508315274885,0.5053859977559],[0.19238893585642,0.09998345229702,0.2327586214115,0.56757229278389,0.077063905483334],[0,0.57199078121507,0.52379741489613,0.057325993084402,0.13162119512991],[0.30389112511297,0.81878648581285,0.26782266940858,0.11990681643178,0.11877807183072],[0.75787430982599,0.1684526202699,0.19227295840652,0.81373499444494,0.091290752186439],[0.073156992084523,0.50023416989289,0.11587826764887,0.89910834927955,0.36257059140842],[0.38586740167255,0,0.16305003103212,0.71599901009653,0.67832995814554],[0.93338407668489,0.049288650823204,0.063028820300489,0.77737744457403,0.5828340822828],[0.1151934612453,0.47638807908487,0.10438812736735,0.18111360370011,0.6178004173583],[0.34292164049147,0.74169049001256,0.79985816602489,0.14834142970827,0.24406724955747],[0.48366573757945,0.1975777637315,0.2234735464068,0.88405741612936,0.50270686841035],[0.81358867087254,0.1193448618642,0.72660133220661,0.92111496903469,0.076616958498699],[0.67915843297868,0.016519379144799,0.82903417877406,0.72885612700766,0.41356194613555],[0.1810733834526,0.57762708788787,0.47849032323212,0.11478704099844,0],[0.87574004312429,0.063539542527819,0.34641653625177,0.033412082046991,0.37572712143897],[0.46634002321642,0.13110163698158,0.062089189244918,0.58342887318809,0],[0,0.42601467957267,0.636177543557,0.1985142952455,0.86068127715879],[0.24611981199787,0.3236196811316,0.00080030556411263,0.53624826831627,0.081227770482836],[0.74063006768601,0.18898877042526,0.59475281393539,0.33059629962168,0.30339995496295],[0.11769087018609,0.44234149506406,0.096702230386464,0.03677650645625,0.47866120518188],[0.61835661904986,0.61506913245604,0.48416354673843,0.47170408169372,0.16455653149119],[0.75885908879856,0.21001852094261,0.2877108025361,0.03668694655813,0.26594106234692],[0.24665296995254,0.35817260978699,0.24719455429037,0.12440675887997,0],[0.20254039688684,0.72876418252716,1,0.39787164605798,0.90169953376246],[0.35828860456733,0,0.08598470196157,0.037847427931386,0.12696502194262],[0.56597504281488,0.85770575397201,0.18051018856223,0.11778596170364,0.03647206514918],[0.021739953196077,0.25150072280728,0.57083896962207,0.60623293576777,0.11262478866213],[0.62718875080459,0.024373017472981,0.28417528331488,0.16190160998269,0.022387098629912],[0.61656856631649,0.42549598911053,0.51876804568675,0.14319751273556,0.072947653707731],[0.20978523910767,0.95380216154368,0.19513727820276,0.22234384197436,0.12013328707621],[0.10137032407437,0.6617561032029,0.23645994308214,0.42915270031439,0.22589842131566],[0.79231282237448,0.053290331812414,0.41051769616716,0.32181792950494,0.24620024137957],[0.45070370425101,0.43189782118482,0.55653401716626,1,0.63999544096315],[0.11402916884886,0.49962841409261,0.10652881686651,0.29343969292392,0.16486720431884],[0.43100060317206,0.33033721495278,0.69349135469585,0.086257021251268,0.47472348649593],[0.013915801301249,0.31175649550577,0,0.47555873772659,0.786777483226],[0.54742566236565,0.88225684481031,0.32383865002344,0.23027776314115,0.11598235535247],[0.84406439619686,0.12613660177957,0.39500226226607,0.74632251388074,0.082084600388752],[0.050166080470521,0.40228436764466,0.36606256615282,0.19202065731037,0.24419653622973],[0.32169403817225,0.48849913749052,0.020979188820542,0.25757281438832,0.17208364432219],[0.13504365609773,0.46248616214002,0.12254583596401,0.24229296702861,0.71505463200954],[0.55001213469232,0,0.036732261750224,0.33604768661985,0.43394393067444],[0.047906622567685,0,0.063657280813356,0.39982700167207,0.47344509670669],[0.23885323457452,0.19499845647203,0.2296215017915,0.15376872939254,0],[0.025647287501275,0.39519156195821,0.066916437026298,0,0.27564389680816],[0.18612231050097,0.76521286190166,0.22610729382837,0.3802919950399,0.29264272081435],[0.32043617704111,1,0.040752740681255,0.27053657782539,0.099879721017115],[0.53073432415646,0.038163703326596,0.7157609404176,0.54542776789066,0.43602792010593],[0.85554696525455,0.4137886781838,0.14259850270634,0,0.53338776244442],[0.61158676403827,0.26380892960425,0.33659639459661,0.050370550852293,0.12493449719461],[0.06570439236993,0.52158985029147,0.37231673704177,0.10606097886866,0.44789938507264],[0.72879303585838,0.38411996044051,0.22210522332978,0.084786578660611,0.14488194467383],[0.63411198736428,0.70777721333718,0.28501281327951,0.026827867684685,0.44891323931583]],[[0.21276653474175,0.73800289779917,0.30546508635599,0.22759512209501,0.14017597001551],[0.34734890766943,0.28690210488037,0.35455092197992,0.36959177996577,0.18566211028331],[0.25081006465304,0.33044098595263,0.51021264060153,0.31560038251077,0.22136925607415],[0.13251043171951,0.16015073182148,0.86016247492449,0.4453473524257,0.28498629278428],[0.2195574121664,0.047011954392501,0.21547402663642,0.46525296136801,0.12535841616509]],[[0],[0.065907928435985],[0.0025849434593917],[0],[0]]],"neuronsByLevel":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[7.4007356736219,8.4145987587947,4.8170954855245,5.2674791217121,6.6497612972105],[7.8605846422976,10.623646715039,13.665535961755,11.754201731375,5.9859712845828],[0.49721214014178]]}')
DRAW = false

-- Réseau de neurones
NB_COUCHE_CACHEES = 2
TAILLE_COUCHE_CACHEE = 5

-- Algorithmes génétiques
NB_INDIVIDU_POPULATION = 10
NB_GENERATIONS = 5000 -- stop program
TOP_CLASSEMENT = 0.5 -- keep only part of the ranking
MUTATION_PROBA = 0.25
MUTATION_RATE = 0.2 -- ±%

-- Paramètres spécifiques au jeu
SCREEN_WEIGHT = 256 -- x (horizontal / to right)
SCREEN_HEIGHT = 224 -- y (vertical /to bottom)
NB_SPRITES = 12 -- limited in this game

-- Constantes de facilitation
TAILLE_TILE = 16
--- @deprecated Depending "sprite"|"tile" input group size
INPUTS_X_MAX = SCREEN_WEIGHT / TAILLE_TILE -- x
--- @deprecated Depending "sprite"|"tile" input group size
INPUTS_Y_MAX = SCREEN_HEIGHT / TAILLE_TILE -- y
NB_INPUTS_SPRITES = INPUTS_X_MAX * INPUTS_Y_MAX
NB_INPUTS_TILES = INPUTS_X_MAX * INPUTS_Y_MAX
ENEMY_ENABLED = 1
TILE_ENABLED = 1

--- @alias Position { x: number, y: number } In custom grid (not in pixel graphic). Start at "1"
--- @alias Reseau { neuronsByLevel: number[][], weightsByLevel: number[][][] }
--- @alias Generation Reseau[]

--[[
 1  17  ..
 2  18  ..
..  ..  ..
16  32  ..
--]]
--- Starts at "0"
--- @param position Position
function neuronIndexFromGridPosition(position)
    return position.x + position.y * INPUTS_X_MAX
end
--- @param neuronIndex number
function gridPositionFromNeuronIndex(neuronIndex)
    return {
        x = neuronIndex % INPUTS_X_MAX,
        y = math.floor(neuronIndex / INPUTS_X_MAX),
    }
end

--- @param reseau Reseau
function drawReseau(reseau)
    local inputCellSize = 6 -- max SCREEN_WEIGHT/TAILLE_TILE & SCREEN_HEIGHT/TAILLE_TILE
    -- input #1: sprites
    local spritesInputsDrawOffset = { x = 0, y = 0 }
    local spritesInputs = { table.unpack(reseau.neuronsByLevel[1], 1, NB_INPUTS_SPRITES) }
    for i, inputNeuron in ipairs(spritesInputs) do
        local position = gridPositionFromNeuronIndex(i - 1)
        gui.drawRectangle(
                spritesInputsDrawOffset.x + inputCellSize * position.x,
                spritesInputsDrawOffset.y + inputCellSize * position.y,
                inputCellSize,
                inputCellSize,
                "black",
                inputNeuron == ENEMY_ENABLED and "red" or nil)
    end
    ---- input #2: tiles
    local tilesInputsDrawOffset = { x = spritesInputsDrawOffset.x, y = 100--[[TODO computed]] }
    local tilesInputs = { table.unpack(reseau.neuronsByLevel[1], NB_INPUTS_SPRITES + 1, NB_INPUTS_SPRITES + NB_INPUTS_TILES) }
    for i, inputNeuron in ipairs(tilesInputs) do
        local position = gridPositionFromNeuronIndex(i - 1)
        gui.drawRectangle(
                tilesInputsDrawOffset.x + position.x * inputCellSize,
                tilesInputsDrawOffset.y + position.y * inputCellSize,
                inputCellSize,
                inputCellSize,
                "black",
                inputNeuron == TILE_ENABLED and "red" or nil)
    end

    -- outputs
    local outputCellSize = 12
    for o, outputNeuron in ipairs(reseau.neuronsByLevel[#reseau.neuronsByLevel]) do
        gui.drawRectangle(
                SCREEN_WEIGHT - outputCellSize,
                (o - 1) * outputCellSize,
                outputCellSize,
                outputCellSize,
                "white",
                outputActivated(outputNeuron) and "red" or "black")
    end

    -- intermediates
    local inputsRight = gridPositionFromNeuronIndex(#reseau.neuronsByLevel[1] - 1).x * inputCellSize + inputCellSize
    local outputLeft = SCREEN_WEIGHT - outputCellSize
    local nbCouches = #reseau.neuronsByLevel - 2
    local spaceX = math.floor(((outputLeft - inputsRight) - (nbCouches * inputCellSize)) / (nbCouches + 1))
    local spaceY = 35
    for c = 2, #reseau.neuronsByLevel - 1 do
        for n, neuron in ipairs(reseau.neuronsByLevel[c]) do
            gui.drawRectangle(
                    inputsRight + spaceX + (c - 2) * (spaceX + inputCellSize),
                    (n - 1) * (inputCellSize + spaceY),
                    inputCellSize,
                    inputCellSize,
                    "black",
                    nil)
        end
    end
end

--- @return Position[]
function getSprites()
    local cameraX = memory.read_s16_le(0x1462)
    local cameraY = memory.read_s16_le(0x1464)

    local sprites = {}
    for i = 0, NB_SPRITES - 1 do
        local status = memory.readbyte(0x14c8 + i)
        if status ~= 0 then
            local spriteX = memory.readbyte(0xe4 + i) + memory.readbyte(0x14e0 + i) * 256
            local spriteY = memory.readbyte(0xd8 + i) + memory.readbyte(0x14d4 + i) * 256

            local screenX = spriteX - cameraX
            local screenY = spriteY - cameraY

            -- visible by player?
            if 0 < screenX and screenX < SCREEN_WEIGHT
                    and 0 < screenY and screenY < SCREEN_HEIGHT then
                local gridX = math.floor(TAILLE_TILE * (screenX / 256)) + 1
                local gridY = math.floor(TAILLE_TILE * (screenY / 256)) + 1
                table.insert(sprites, { x = gridX, y = gridY })
            end
        end
    end
    return sprites
end
function runDebugSprites()
    savestate.load(NOM_SAVESTATE)
    local interval = 10
    local rep = 0
    while true do
        rep = rep + 1
        if rep % interval == 0 then
            console.clear()
            gui.clearGraphics()
            for i = 0, 15 do
                for j = 0, 15 do
                    gui.drawRectangle(i * 16, j * 16, 16, 16, "black")
                end
            end

            for _, sprite in ipairs(getSprites()) do
                gui.drawRectangle((sprite.x - 1) * TAILLE_TILE, (sprite.y - 1) * TAILLE_TILE, TAILLE_TILE, TAILLE_TILE, "black", "red")
            end
        end
        emu.frameadvance()
    end
end

--- @return Position[]
function getTiles()
    local cameraX = memory.read_s16_le(0x1462)
    local cameraY = memory.read_s16_le(0x1464)
    local sprites = {}
    for i = 1, SCREEN_WEIGHT / TAILLE_TILE, 1 do
        local xT = math.floor((cameraX + ((i - 1) * TAILLE_TILE) + 8) / TAILLE_TILE)
        for j = 1, SCREEN_HEIGHT / TAILLE_TILE, 1 do
            local yT = math.floor((cameraY + ((j - 1) * TAILLE_TILE)) / TAILLE_TILE)
            if xT > 0 and yT > 0 then
                local tile = memory.readbyte(0x1C800 + math.floor(xT / TAILLE_TILE) * 0x1B0 + yT * TAILLE_TILE + xT % TAILLE_TILE)
                if tile == 1 then
                    table.insert(sprites, { x = i, y = j })
                end
            end
        end
    end
    return sprites
end
function runDebugTiles()
    savestate.load(NOM_SAVESTATE)
    local interval = 10
    local rep = 0
    while true do
        rep = rep + 1
        if rep % interval == 0 then
            console.clear()
            gui.clearGraphics()
            for _, tile in ipairs(getTiles()) do
                console.log(tile.x .. "/" .. tile.y)
                gui.drawRectangle((tile.x - 1) * TAILLE_TILE, (tile.y - 1) * TAILLE_TILE, TAILLE_TILE, TAILLE_TILE, "black", "red")
            end
        end
        emu.frameadvance()
    end
end

--- @return Generation
function firstRandomGeneration()
    local population = {}
    for i = 1, NB_INDIVIDU_POPULATION do
        local individu = firstRandomIndividu(NB_INPUTS_SPRITES + NB_INPUTS_TILES, #BUTTONS)
        mutateIndividu(individu)
        table.insert(population, individu)
    end
    return population
end

-- Crée la nouvelle basée sur la mutation du #1 avec les N suivants
--- @param previousGeneration Generation
--- @return Generation
function nextGeneration(previousGeneration, scoreByIndividu)
    table.sort(scoreByIndividu, function(a, b)
        return a.score > b.score
    end)
    local bestIndividu = scoreByIndividu[1].individu
    if #previousGeneration > 1 and scoreByIndividu[1].score ~= scoreByIndividu[2].score then
        console.log("New generation with a #1 !!!")
    end

    local nextGeneration = {}
    -- evolve the best (for little population)
    if #previousGeneration > 1 then
        local bestItself = reproduireIndividus(bestIndividu, bestIndividu)
        bestItself = mutateIndividu(bestItself)
        table.insert(nextGeneration, bestItself)
    end
    -- keep the best (for little population)
    table.insert(nextGeneration, bestIndividu)
    -- reproduce the best with the others
    while #nextGeneration < #previousGeneration do
        local skipBest = 1
        local otherIndex = math.floor(math.random() * TOP_CLASSEMENT * (#previousGeneration - skipBest)) + skipBest
        local goodIndividu = previousGeneration[otherIndex + 1]
        local childIndividu = reproduireIndividus(goodIndividu, bestIndividu)
        childIndividu = mutateIndividu(childIndividu)
        table.insert(nextGeneration, childIndividu)
    end
    return nextGeneration
end

--- @param nbInputs number
--- @param nbOutputs number
--- @return Reseau
function firstRandomIndividu(nbInputs, nbOutputs)
    if RESTORE ~= nill then
        return RESTORE
    end

    local initialValue = 0

    local neuronsByLevel = {}
    -- first = input
    local inputs = {}
    for x = 1, nbInputs do
        table.insert(inputs, initialValue)
    end
    table.insert(neuronsByLevel, inputs)
    -- intermediates
    for x = 1, NB_COUCHE_CACHEES do
        local level = {}
        for x = 1, TAILLE_COUCHE_CACHEE do
            table.insert(level, initialValue)
        end
        table.insert(neuronsByLevel, level)
    end
    -- last = outputs
    local outputs = {}
    for x = 1, nbOutputs do
        table.insert(outputs, initialValue)
    end
    table.insert(neuronsByLevel, outputs)

    local weightsByLevel = {} -- from level > source neuron index > target neuron index
    for c = 1, #neuronsByLevel - 1 do
        local fromNeuron = {}
        for from = 1, #neuronsByLevel[c] do
            local toNeuron = {}
            for to = 1, #neuronsByLevel[c + 1] do
                table.insert(toNeuron, 0)
            end
            table.insert(fromNeuron, toNeuron)
        end
        table.insert(weightsByLevel, fromNeuron)
    end

    return {
        neuronsByLevel = neuronsByLevel,
        weightsByLevel = weightsByLevel,
    }
end

--- @param weight number
--- @return number
function mutateWeight(weight)
    if math.random() < MUTATION_PROBA then
        local rate = MUTATION_RATE * (math.random() - 0.5)
        weight = weight + rate
        if weight < 0 then
            weight = 0
        end
        if weight > 1 then
            weight = 1
        end
    end
    return weight
end

--- @param reseau Reseau
--- @return Reseau
function mutateIndividu(reseau)
    for c, level in ipairs(reseau.weightsByLevel) do
        for f, from in ipairs(level) do
            for l, weight in ipairs(from) do
                from[l] = mutateWeight(from[l])
            end
        end
    end
    return reseau
end

--- @param reseau1 Reseau
--- @param reseau2 Reseau
--- @return Reseau
function reproduireIndividus(reseau1, reseau2)
    local neuronsByLevel = {}
    for c = 1, #reseau1.neuronsByLevel do
        local level = {}
        for n = 1, #reseau1.neuronsByLevel[c] do
            table.insert(level, 0) -- computed during propagation
        end
        table.insert(neuronsByLevel, level)
    end

    local weightsByLevel = {}
    for c = 1, #reseau1.weightsByLevel do
        local fromNeuron = {}
        for from = 1, #reseau1.weightsByLevel[c] do
            local toNeuron = {}
            for to = 1, #reseau1.weightsByLevel[c][from] do
                local avgWeight = (reseau1.weightsByLevel[c][from][to] + reseau2.weightsByLevel[c][from][to]) / 2
                table.insert(toNeuron, avgWeight)
            end
            table.insert(fromNeuron, toNeuron)
        end
        table.insert(weightsByLevel, fromNeuron)
    end

    return {
        neuronsByLevel = neuronsByLevel,
        weightsByLevel = weightsByLevel,
    }
end

--- @param value number
--- @return boolean
function outputActivated(value)
    return value >= 0.5
end

--- @param value number
--- @return number
function sigmoid(value)
    return value / (1 + math.exp(-1 * value))
end

--- @param reseau Reseau
--- @param inputs number[]
function updateInputsRecomputeLinkToOutputs(reseau, inputs)
    -- 1st level: inputs
    for i, input in ipairs(inputs) do
        reseau.neuronsByLevel[1][i] = input
    end

    -- intermediates
    for c = 2, #reseau.neuronsByLevel do
        for n, neuron in ipairs(reseau.neuronsByLevel[c]) do
            local weightedSum = 0.0
            for p, previous in ipairs(reseau.neuronsByLevel[c - 1]) do
                local weight = reseau.weightsByLevel[c - 1][p][n]
                weightedSum = weightedSum + weight * previous
            end
            reseau.neuronsByLevel[c][n] = sigmoid(weightedSum)
        end
    end

    local outputs = {}
    for o, neuron in ipairs(reseau.neuronsByLevel[#reseau.neuronsByLevel]) do
        table.insert(outputs, outputActivated(neuron))
    end
    return outputs
end

--- @param individu Reseau
function determineInputsThenRecomputeNetworkThenDetermineOutputs(individu)
    local inputs = {}
    for i = 1, NB_INPUTS_SPRITES + NB_INPUTS_TILES do
        table.insert(inputs, 0)
    end
    -- #1: sprites
    for _, sprite in ipairs(getSprites()) do
        local i = neuronIndexFromGridPosition({ x = sprite.x, y = sprite.y })
        inputs[i + 1] = ENEMY_ENABLED
    end
    -- #2: tiles
    for _, sprite in ipairs(getTiles()) do
        local i = NB_INPUTS_SPRITES + neuronIndexFromGridPosition({ x = sprite.x, y = sprite.y })
        inputs[i + 1 - 1--[[because append to existing]]] = ENEMY_ENABLED
    end

    local outputs = updateInputsRecomputeLinkToOutputs(individu, inputs)

    local newButtons = {}
    for o, enabled in ipairs(outputs) do
        newButtons[BUTTONS[o]] = enabled
    end
    newButtons.Right = true -- first version: all the way to the right
    joypad.set(newButtons, 1)
end

--- @return boolean
function niveauFini()
    return memory.readbyte(0x0100) == 12
end

--- @return number
function getMarioScore()
    return memory.read_u24_le(0x0f34)
end
--- 1 per digit
--- @return number
function getTimer()
    return memory.read_u8(0x0F31 + 0) * 100 + memory.read_u8(0x0F31 + 1) * 10 + memory.read_u8(0x0F31 + 2) * 1
end
function computeScore()
    local maxTime = 300
    local totalTime = maxTime - getTimer()
    if totalTime == maxTime then
        -- blocked
        return (0) + getMarioScore()
    else
        return totalTime + getMarioScore()
    end
end
function runDebugScore()
    savestate.load(NOM_SAVESTATE)
    local interval = 10
    local rep = 0
    while true do
        rep = rep + 1
        if rep % interval == 0 then
            console.log(getMarioScore())
            console.log(getTimer())
            console.log("=> " .. computeScore())
        end
        emu.frameadvance()
    end
end

--- @param individu Reseau
function play(individu)
    savestate.load(NOM_SAVESTATE)
    while true do
        determineInputsThenRecomputeNetworkThenDetermineOutputs(individu)
        emu.frameadvance()
        if DRAW then
            drawReseau(individu)
        end
        if niveauFini() then
            return computeScore() -- TODO append time
        end
    end
end

function runIA()
    local population = firstRandomGeneration()
    for generation = 1, NB_GENERATIONS do
        console.log("Génération " .. generation .. "/" .. NB_GENERATIONS)
        local scoreByIndividu = {}
        for i, individu in ipairs(population) do
            local score = play(individu)
            console.log("> Individu " .. i .. "/" .. #population .. " with score " .. score)
            table.insert(scoreByIndividu, { individu = individu, score = score })
        end

        population = nextGeneration(population, scoreByIndividu)
    end
end

if PROGRAM == "IA" then
    runIA()
elseif PROGRAM == "DEBUG SPRITES" then
    runDebugSprites()
elseif PROGRAM == "DEBUG TILES" then
    runDebugTiles()
elseif PROGRAM == "DEBUG SCORE" then
    runDebugScore()
end
